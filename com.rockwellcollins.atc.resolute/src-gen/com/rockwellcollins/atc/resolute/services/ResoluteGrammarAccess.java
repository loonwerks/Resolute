/*
 * generated by Xtext
 */
package com.rockwellcollins.atc.resolute.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class ResoluteGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.AnnexLibrary");
		private final RuleCall cResoluteLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary aadl2::AnnexLibrary:
		//	ResoluteLibrary;
		@Override public ParserRule getRule() { return rule; }

		//ResoluteLibrary
		public RuleCall getResoluteLibraryParserRuleCall() { return cResoluteLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.AnnexSubclause");
		private final RuleCall cResoluteSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause aadl2::AnnexSubclause:
		//	ResoluteSubclause;
		@Override public ParserRule getRule() { return rule; }

		//ResoluteSubclause
		public RuleCall getResoluteSubclauseParserRuleCall() { return cResoluteSubclauseParserRuleCall; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.Namespace");
		private final RuleCall cFunctionDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Namespace aadl2::Namespace:
		//	FunctionDefinition;
		@Override public ParserRule getRule() { return rule; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall() { return cFunctionDefinitionParserRuleCall; }
	}

	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArgParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLetBindingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NamedElement aadl2::NamedElement:
		//	Definition
		//	| Arg
		//	| LetBinding;
		@Override public ParserRule getRule() { return rule; }

		//Definition | Arg | LetBinding
		public Alternatives getAlternatives() { return cAlternatives; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_0() { return cDefinitionParserRuleCall_0; }

		//Arg
		public RuleCall getArgParserRuleCall_1() { return cArgParserRuleCall_1; }

		//LetBinding
		public RuleCall getLetBindingParserRuleCall_2() { return cLetBindingParserRuleCall_2; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnalysisStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClaimTextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefinitionBodyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element aadl2::Element:
		//	Expr
		//	//|	ProveStatement
		//	| AnalysisStatement
		//	| ClaimText
		//	| DefinitionBody;
		@Override public ParserRule getRule() { return rule; }

		//Expr //|	ProveStatement
		//| AnalysisStatement | ClaimText | DefinitionBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }

		//AnalysisStatement
		public RuleCall getAnalysisStatementParserRuleCall_1() { return cAnalysisStatementParserRuleCall_1; }

		//ClaimText
		public RuleCall getClaimTextParserRuleCall_2() { return cClaimTextParserRuleCall_2; }

		//DefinitionBody
		public RuleCall getDefinitionBodyParserRuleCall_3() { return cDefinitionBodyParserRuleCall_3; }
	}

	public class ResoluteLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ResoluteLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResoluteLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		//ResoluteLibrary:
		//	{ResoluteLibrary} definitions+=Definition*;
		@Override public ParserRule getRule() { return rule; }

		//{ResoluteLibrary} definitions+=Definition*
		public Group getGroup() { return cGroup; }

		//{ResoluteLibrary}
		public Action getResoluteLibraryAction_0() { return cResoluteLibraryAction_0; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_1_0() { return cDefinitionsDefinitionParserRuleCall_1_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRulesetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Definition:
		//	ConstantDefinition
		//	| FunctionDefinition
		//	| Ruleset;
		@Override public ParserRule getRule() { return rule; }

		//ConstantDefinition | FunctionDefinition | Ruleset
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantDefinition
		public RuleCall getConstantDefinitionParserRuleCall_0() { return cConstantDefinitionParserRuleCall_0; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_1() { return cFunctionDefinitionParserRuleCall_1; }

		//Ruleset
		public RuleCall getRulesetParserRuleCall_2() { return cRulesetParserRuleCall_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cListTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSetTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cBaseTypeParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamTypeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamTypeTypeParserRuleCall_2_1_1_0 = (RuleCall)cParamTypeAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLibraryFnTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLibNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLibNameIDTerminalRuleCall_3_1_0 = (RuleCall)cLibNameAssignment_3_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cFnTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cFnTypeIDTerminalRuleCall_3_3_0 = (RuleCall)cFnTypeAssignment_3_3.eContents().get(0);
		
		//Type:
		//	{ListType} '[' type=Type ']'
		//	| {SetType} '{' type=Type '}'
		//	| BaseType ('<' paramType=Type '>')?
		//	| {LibraryFnType} libName=ID '.' fnType=ID;
		@Override public ParserRule getRule() { return rule; }

		//{ListType} '[' type=Type ']' | {SetType} '{' type=Type '}' | BaseType ('<' paramType=Type '>')? | {LibraryFnType}
		//libName=ID '.' fnType=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ListType} '[' type=Type ']'
		public Group getGroup_0() { return cGroup_0; }

		//{ListType}
		public Action getListTypeAction_0_0() { return cListTypeAction_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_2_0() { return cTypeTypeParserRuleCall_0_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//{SetType} '{' type=Type '}'
		public Group getGroup_1() { return cGroup_1; }

		//{SetType}
		public Action getSetTypeAction_1_0() { return cSetTypeAction_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//type=Type
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_2_0() { return cTypeTypeParserRuleCall_1_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//BaseType ('<' paramType=Type '>')?
		public Group getGroup_2() { return cGroup_2; }

		//BaseType
		public RuleCall getBaseTypeParserRuleCall_2_0() { return cBaseTypeParserRuleCall_2_0; }

		//('<' paramType=Type '>')?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//'<'
		public Keyword getLessThanSignKeyword_2_1_0() { return cLessThanSignKeyword_2_1_0; }

		//paramType=Type
		public Assignment getParamTypeAssignment_2_1_1() { return cParamTypeAssignment_2_1_1; }

		//Type
		public RuleCall getParamTypeTypeParserRuleCall_2_1_1_0() { return cParamTypeTypeParserRuleCall_2_1_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2_1_2() { return cGreaterThanSignKeyword_2_1_2; }

		//{LibraryFnType} libName=ID '.' fnType=ID
		public Group getGroup_3() { return cGroup_3; }

		//{LibraryFnType}
		public Action getLibraryFnTypeAction_3_0() { return cLibraryFnTypeAction_3_0; }

		//libName=ID
		public Assignment getLibNameAssignment_3_1() { return cLibNameAssignment_3_1; }

		//ID
		public RuleCall getLibNameIDTerminalRuleCall_3_1_0() { return cLibNameIDTerminalRuleCall_3_1_0; }

		//'.'
		public Keyword getFullStopKeyword_3_2() { return cFullStopKeyword_3_2; }

		//fnType=ID
		public Assignment getFnTypeAssignment_3_3() { return cFnTypeAssignment_3_3; }

		//ID
		public RuleCall getFnTypeIDTerminalRuleCall_3_3_0() { return cFnTypeIDTerminalRuleCall_3_3_0; }
	}

	public class BaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.BaseType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeRealKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeStringKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeBoolKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeRangeKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeAadlKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeComponentKeyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		private final Keyword cTypeAbstractKeyword_0_7 = (Keyword)cTypeAlternatives_0.eContents().get(7);
		private final Keyword cTypeBusKeyword_0_8 = (Keyword)cTypeAlternatives_0.eContents().get(8);
		private final Keyword cTypeDataKeyword_0_9 = (Keyword)cTypeAlternatives_0.eContents().get(9);
		private final Keyword cTypeDeviceKeyword_0_10 = (Keyword)cTypeAlternatives_0.eContents().get(10);
		private final Keyword cTypeMemoryKeyword_0_11 = (Keyword)cTypeAlternatives_0.eContents().get(11);
		private final Keyword cTypeProcessorKeyword_0_12 = (Keyword)cTypeAlternatives_0.eContents().get(12);
		private final Keyword cTypeProcessKeyword_0_13 = (Keyword)cTypeAlternatives_0.eContents().get(13);
		private final Keyword cTypeSubprogram_groupKeyword_0_14 = (Keyword)cTypeAlternatives_0.eContents().get(14);
		private final Keyword cTypeSubprogramKeyword_0_15 = (Keyword)cTypeAlternatives_0.eContents().get(15);
		private final Keyword cTypeSystemKeyword_0_16 = (Keyword)cTypeAlternatives_0.eContents().get(16);
		private final Keyword cTypeThread_groupKeyword_0_17 = (Keyword)cTypeAlternatives_0.eContents().get(17);
		private final Keyword cTypeThreadKeyword_0_18 = (Keyword)cTypeAlternatives_0.eContents().get(18);
		private final Keyword cTypeVirtual_busKeyword_0_19 = (Keyword)cTypeAlternatives_0.eContents().get(19);
		private final Keyword cTypeVirtual_processorKeyword_0_20 = (Keyword)cTypeAlternatives_0.eContents().get(20);
		private final Keyword cTypeConnectionKeyword_0_21 = (Keyword)cTypeAlternatives_0.eContents().get(21);
		private final Keyword cTypePropertyKeyword_0_22 = (Keyword)cTypeAlternatives_0.eContents().get(22);
		private final Keyword cTypeFeatureKeyword_0_23 = (Keyword)cTypeAlternatives_0.eContents().get(23);
		private final Keyword cTypePortKeyword_0_24 = (Keyword)cTypeAlternatives_0.eContents().get(24);
		private final Keyword cTypeData_portKeyword_0_25 = (Keyword)cTypeAlternatives_0.eContents().get(25);
		private final Keyword cTypeEvent_portKeyword_0_26 = (Keyword)cTypeAlternatives_0.eContents().get(26);
		private final Keyword cTypeEvent_data_portKeyword_0_27 = (Keyword)cTypeAlternatives_0.eContents().get(27);
		private final Keyword cTypeFeature_groupKeyword_0_28 = (Keyword)cTypeAlternatives_0.eContents().get(28);
		private final Keyword cTypeAccessKeyword_0_29 = (Keyword)cTypeAlternatives_0.eContents().get(29);
		private final Keyword cTypeBus_accessKeyword_0_30 = (Keyword)cTypeAlternatives_0.eContents().get(30);
		private final Keyword cTypeProvides_bus_accessKeyword_0_31 = (Keyword)cTypeAlternatives_0.eContents().get(31);
		private final Keyword cTypeRequires_bus_accessKeyword_0_32 = (Keyword)cTypeAlternatives_0.eContents().get(32);
		private final Keyword cTypeData_accessKeyword_0_33 = (Keyword)cTypeAlternatives_0.eContents().get(33);
		private final Keyword cTypeProvides_data_accessKeyword_0_34 = (Keyword)cTypeAlternatives_0.eContents().get(34);
		private final Keyword cTypeRequires_data_accessKeyword_0_35 = (Keyword)cTypeAlternatives_0.eContents().get(35);
		private final Keyword cTypeSubprogram_accessKeyword_0_36 = (Keyword)cTypeAlternatives_0.eContents().get(36);
		private final Keyword cTypeProvides_subprogram_accessKeyword_0_37 = (Keyword)cTypeAlternatives_0.eContents().get(37);
		private final Keyword cTypeRequires_subprogram_accessKeyword_0_38 = (Keyword)cTypeAlternatives_0.eContents().get(38);
		private final Keyword cTypeSubprogram_group_accessKeyword_0_39 = (Keyword)cTypeAlternatives_0.eContents().get(39);
		private final Keyword cTypeProvides_subprogram_group_accessKeyword_0_40 = (Keyword)cTypeAlternatives_0.eContents().get(40);
		private final Keyword cTypeRequires_subprogram_group_accessKeyword_0_41 = (Keyword)cTypeAlternatives_0.eContents().get(41);
		private final Keyword cTypeFlow_specificationKeyword_0_42 = (Keyword)cTypeAlternatives_0.eContents().get(42);
		private final Keyword cTypeEnd_to_end_flowKeyword_0_43 = (Keyword)cTypeAlternatives_0.eContents().get(43);
		
		//BaseType:
		//	type=('int'
		//	| 'real'
		//	| 'string'
		//	| 'bool'
		//	| 'range'
		//	| 'aadl'
		//	| 'component'
		//	| 'abstract'
		//	| 'bus'
		//	| 'data'
		//	| 'device'
		//	| 'memory'
		//	| 'processor'
		//	| 'process'
		//	| 'subprogram_group'
		//	| 'subprogram'
		//	| 'system'
		//	| 'thread_group'
		//	| 'thread'
		//	| 'virtual_bus'
		//	| 'virtual_processor'
		//	| 'connection'
		//	| 'property'
		//	| 'feature'
		//	| 'port'
		//	| 'data_port'
		//	| 'event_port'
		//	| 'event_data_port'
		//	| 'feature_group'
		//	| 'access'
		//	| 'bus_access'
		//	| 'provides_bus_access'
		//	| 'requires_bus_access'
		//	| 'data_access'
		//	| 'provides_data_access'
		//	| 'requires_data_access'
		//	| 'subprogram_access'
		//	| 'provides_subprogram_access'
		//	| 'requires_subprogram_access'
		//	| 'subprogram_group_access'
		//	| 'provides_subprogram_group_access'
		//	| 'requires_subprogram_group_access'
		//	| 'flow_specification'
		//	| 'end_to_end_flow');
		@Override public ParserRule getRule() { return rule; }

		//type=('int' | 'real' | 'string' | 'bool' | 'range' | 'aadl' | 'component' | 'abstract' | 'bus' | 'data' | 'device' |
		//'memory' | 'processor' | 'process' | 'subprogram_group' | 'subprogram' | 'system' | 'thread_group' | 'thread' |
		//'virtual_bus' | 'virtual_processor' | 'connection' | 'property' | 'feature' | 'port' | 'data_port' | 'event_port' |
		//'event_data_port' | 'feature_group' | 'access' | 'bus_access' | 'provides_bus_access' | 'requires_bus_access' |
		//'data_access' | 'provides_data_access' | 'requires_data_access' | 'subprogram_access' | 'provides_subprogram_access' |
		//'requires_subprogram_access' | 'subprogram_group_access' | 'provides_subprogram_group_access' |
		//'requires_subprogram_group_access' | 'flow_specification' | 'end_to_end_flow')
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//('int' | 'real' | 'string' | 'bool' | 'range' | 'aadl' | 'component' | 'abstract' | 'bus' | 'data' | 'device' | 'memory'
		//| 'processor' | 'process' | 'subprogram_group' | 'subprogram' | 'system' | 'thread_group' | 'thread' | 'virtual_bus' |
		//'virtual_processor' | 'connection' | 'property' | 'feature' | 'port' | 'data_port' | 'event_port' | 'event_data_port'
		//| 'feature_group' | 'access' | 'bus_access' | 'provides_bus_access' | 'requires_bus_access' | 'data_access' |
		//'provides_data_access' | 'requires_data_access' | 'subprogram_access' | 'provides_subprogram_access' |
		//'requires_subprogram_access' | 'subprogram_group_access' | 'provides_subprogram_group_access' |
		//'requires_subprogram_group_access' | 'flow_specification' | 'end_to_end_flow')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }

		//'int'
		public Keyword getTypeIntKeyword_0_0() { return cTypeIntKeyword_0_0; }

		//'real'
		public Keyword getTypeRealKeyword_0_1() { return cTypeRealKeyword_0_1; }

		//'string'
		public Keyword getTypeStringKeyword_0_2() { return cTypeStringKeyword_0_2; }

		//'bool'
		public Keyword getTypeBoolKeyword_0_3() { return cTypeBoolKeyword_0_3; }

		//'range'
		public Keyword getTypeRangeKeyword_0_4() { return cTypeRangeKeyword_0_4; }

		//'aadl'
		public Keyword getTypeAadlKeyword_0_5() { return cTypeAadlKeyword_0_5; }

		//'component'
		public Keyword getTypeComponentKeyword_0_6() { return cTypeComponentKeyword_0_6; }

		//'abstract'
		public Keyword getTypeAbstractKeyword_0_7() { return cTypeAbstractKeyword_0_7; }

		//'bus'
		public Keyword getTypeBusKeyword_0_8() { return cTypeBusKeyword_0_8; }

		//'data'
		public Keyword getTypeDataKeyword_0_9() { return cTypeDataKeyword_0_9; }

		//'device'
		public Keyword getTypeDeviceKeyword_0_10() { return cTypeDeviceKeyword_0_10; }

		//'memory'
		public Keyword getTypeMemoryKeyword_0_11() { return cTypeMemoryKeyword_0_11; }

		//'processor'
		public Keyword getTypeProcessorKeyword_0_12() { return cTypeProcessorKeyword_0_12; }

		//'process'
		public Keyword getTypeProcessKeyword_0_13() { return cTypeProcessKeyword_0_13; }

		//'subprogram_group'
		public Keyword getTypeSubprogram_groupKeyword_0_14() { return cTypeSubprogram_groupKeyword_0_14; }

		//'subprogram'
		public Keyword getTypeSubprogramKeyword_0_15() { return cTypeSubprogramKeyword_0_15; }

		//'system'
		public Keyword getTypeSystemKeyword_0_16() { return cTypeSystemKeyword_0_16; }

		//'thread_group'
		public Keyword getTypeThread_groupKeyword_0_17() { return cTypeThread_groupKeyword_0_17; }

		//'thread'
		public Keyword getTypeThreadKeyword_0_18() { return cTypeThreadKeyword_0_18; }

		//'virtual_bus'
		public Keyword getTypeVirtual_busKeyword_0_19() { return cTypeVirtual_busKeyword_0_19; }

		//'virtual_processor'
		public Keyword getTypeVirtual_processorKeyword_0_20() { return cTypeVirtual_processorKeyword_0_20; }

		//'connection'
		public Keyword getTypeConnectionKeyword_0_21() { return cTypeConnectionKeyword_0_21; }

		//'property'
		public Keyword getTypePropertyKeyword_0_22() { return cTypePropertyKeyword_0_22; }

		//'feature'
		public Keyword getTypeFeatureKeyword_0_23() { return cTypeFeatureKeyword_0_23; }

		//'port'
		public Keyword getTypePortKeyword_0_24() { return cTypePortKeyword_0_24; }

		//'data_port'
		public Keyword getTypeData_portKeyword_0_25() { return cTypeData_portKeyword_0_25; }

		//'event_port'
		public Keyword getTypeEvent_portKeyword_0_26() { return cTypeEvent_portKeyword_0_26; }

		//'event_data_port'
		public Keyword getTypeEvent_data_portKeyword_0_27() { return cTypeEvent_data_portKeyword_0_27; }

		//'feature_group'
		public Keyword getTypeFeature_groupKeyword_0_28() { return cTypeFeature_groupKeyword_0_28; }

		//'access'
		public Keyword getTypeAccessKeyword_0_29() { return cTypeAccessKeyword_0_29; }

		//'bus_access'
		public Keyword getTypeBus_accessKeyword_0_30() { return cTypeBus_accessKeyword_0_30; }

		//'provides_bus_access'
		public Keyword getTypeProvides_bus_accessKeyword_0_31() { return cTypeProvides_bus_accessKeyword_0_31; }

		//'requires_bus_access'
		public Keyword getTypeRequires_bus_accessKeyword_0_32() { return cTypeRequires_bus_accessKeyword_0_32; }

		//'data_access'
		public Keyword getTypeData_accessKeyword_0_33() { return cTypeData_accessKeyword_0_33; }

		//'provides_data_access'
		public Keyword getTypeProvides_data_accessKeyword_0_34() { return cTypeProvides_data_accessKeyword_0_34; }

		//'requires_data_access'
		public Keyword getTypeRequires_data_accessKeyword_0_35() { return cTypeRequires_data_accessKeyword_0_35; }

		//'subprogram_access'
		public Keyword getTypeSubprogram_accessKeyword_0_36() { return cTypeSubprogram_accessKeyword_0_36; }

		//'provides_subprogram_access'
		public Keyword getTypeProvides_subprogram_accessKeyword_0_37() { return cTypeProvides_subprogram_accessKeyword_0_37; }

		//'requires_subprogram_access'
		public Keyword getTypeRequires_subprogram_accessKeyword_0_38() { return cTypeRequires_subprogram_accessKeyword_0_38; }

		//'subprogram_group_access'
		public Keyword getTypeSubprogram_group_accessKeyword_0_39() { return cTypeSubprogram_group_accessKeyword_0_39; }

		//'provides_subprogram_group_access'
		public Keyword getTypeProvides_subprogram_group_accessKeyword_0_40() { return cTypeProvides_subprogram_group_accessKeyword_0_40; }

		//'requires_subprogram_group_access'
		public Keyword getTypeRequires_subprogram_group_accessKeyword_0_41() { return cTypeRequires_subprogram_group_accessKeyword_0_41; }

		//'flow_specification'
		public Keyword getTypeFlow_specificationKeyword_0_42() { return cTypeFlow_specificationKeyword_0_42; }

		//'end_to_end_flow'
		public Keyword getTypeEnd_to_end_flowKeyword_0_43() { return cTypeEnd_to_end_flowKeyword_0_43; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.Arg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_0_2_0 = (RuleCall)cTypeAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cQuantArgAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_1_3_0 = (RuleCall)cExprAssignment_1_3.eContents().get(0);
		
		////Arg types are used for functions, claims, and quantifiers
		//Arg:
		//	=> (name=ID ':' type=Type) | {QuantArg} name=ID ':' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//=> (name=ID ':' type=Type) | {QuantArg} name=ID ':' expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (name=ID ':' type=Type)
		public Group getGroup_0() { return cGroup_0; }

		//name=ID ':' type=Type
		public Group getGroup_0_0() { return cGroup_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0_0() { return cNameIDTerminalRuleCall_0_0_0_0; }

		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_0_2() { return cTypeAssignment_0_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_2_0() { return cTypeTypeParserRuleCall_0_0_2_0; }

		//{QuantArg} name=ID ':' expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{QuantArg}
		public Action getQuantArgAction_1_0() { return cQuantArgAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expr=Expr
		public Assignment getExprAssignment_1_3() { return cExprAssignment_1_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_3_0() { return cExprExprParserRuleCall_1_3_0; }
	}

	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ConstantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//ConstantDefinition:
		//	name=ID ':' type=Type '=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' type=Type '=' expr=Expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyDefinitionBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//FunctionDefinition:
		//	name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' body=DefinitionBody;
		@Override public ParserRule getRule() { return rule; }

		//name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' body=DefinitionBody
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Arg (',' args+=Arg)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Arg
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_2_0_0() { return cArgsArgParserRuleCall_2_0_0; }

		//(',' args+=Arg)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_2_1_1_0() { return cArgsArgParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=DefinitionBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//DefinitionBody
		public RuleCall getBodyDefinitionBodyParserRuleCall_4_0() { return cBodyDefinitionBodyParserRuleCall_4_0; }
	}

	public class DefinitionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.DefinitionBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionBodyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExprAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_0_4_0 = (RuleCall)cExprAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cClaimBodyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskAsteriskKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cClaimAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cClaimClaimTextParserRuleCall_1_2_1_0 = (RuleCall)cClaimAssignment_1_2_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cContextAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cContextClaimContextParserRuleCall_1_3_0 = (RuleCall)cContextAssignment_1_3.eContents().get(0);
		private final Assignment cAssumptionsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cAssumptionsClaimAssumptionParserRuleCall_1_4_0 = (RuleCall)cAssumptionsAssignment_1_4.eContents().get(0);
		private final Assignment cStrategiesAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cStrategiesClaimStrategyParserRuleCall_1_5_0 = (RuleCall)cStrategiesAssignment_1_5.eContents().get(0);
		private final Assignment cExprAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cExprExprParserRuleCall_1_6_0 = (RuleCall)cExprAssignment_1_6.eContents().get(0);
		
		//DefinitionBody:
		//	{FunctionBody} ':' type=Type '=' expr=Expr
		//	| {ClaimBody} '<=' ('**' claim+=ClaimText+ '**') context+=ClaimContext* assumptions+=ClaimAssumption*
		//	strategies+=ClaimStrategy* expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//{FunctionBody} ':' type=Type '=' expr=Expr | {ClaimBody} '<=' ('**' claim+=ClaimText+ '**') context+=ClaimContext*
		//assumptions+=ClaimAssumption* strategies+=ClaimStrategy* expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FunctionBody} ':' type=Type '=' expr=Expr
		public Group getGroup_0() { return cGroup_0; }

		//{FunctionBody}
		public Action getFunctionBodyAction_0_0() { return cFunctionBodyAction_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_2_0() { return cTypeTypeParserRuleCall_0_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//expr=Expr
		public Assignment getExprAssignment_0_4() { return cExprAssignment_0_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_4_0() { return cExprExprParserRuleCall_0_4_0; }

		//{ClaimBody} '<=' ('**' claim+=ClaimText+ '**') context+=ClaimContext* assumptions+=ClaimAssumption*
		//strategies+=ClaimStrategy* expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{ClaimBody}
		public Action getClaimBodyAction_1_0() { return cClaimBodyAction_1_0; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_1() { return cLessThanSignEqualsSignKeyword_1_1; }

		//'**' claim+=ClaimText+ '**'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_2_0() { return cAsteriskAsteriskKeyword_1_2_0; }

		//claim+=ClaimText+
		public Assignment getClaimAssignment_1_2_1() { return cClaimAssignment_1_2_1; }

		//ClaimText
		public RuleCall getClaimClaimTextParserRuleCall_1_2_1_0() { return cClaimClaimTextParserRuleCall_1_2_1_0; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_2_2() { return cAsteriskAsteriskKeyword_1_2_2; }

		//context+=ClaimContext*
		public Assignment getContextAssignment_1_3() { return cContextAssignment_1_3; }

		//ClaimContext
		public RuleCall getContextClaimContextParserRuleCall_1_3_0() { return cContextClaimContextParserRuleCall_1_3_0; }

		//assumptions+=ClaimAssumption*
		public Assignment getAssumptionsAssignment_1_4() { return cAssumptionsAssignment_1_4; }

		//ClaimAssumption
		public RuleCall getAssumptionsClaimAssumptionParserRuleCall_1_4_0() { return cAssumptionsClaimAssumptionParserRuleCall_1_4_0; }

		//strategies+=ClaimStrategy*
		public Assignment getStrategiesAssignment_1_5() { return cStrategiesAssignment_1_5; }

		//ClaimStrategy
		public RuleCall getStrategiesClaimStrategyParserRuleCall_1_5_0() { return cStrategiesClaimStrategyParserRuleCall_1_5_0; }

		//expr=Expr
		public Assignment getExprAssignment_1_6() { return cExprAssignment_1_6; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_6_0() { return cExprExprParserRuleCall_1_6_0; }
	}

	public class ClaimContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ClaimContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValStringTermParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//ClaimContext:
		//	'context' name=ID ':' val=StringTerm;
		@Override public ParserRule getRule() { return rule; }

		//'context' name=ID ':' val=StringTerm
		public Group getGroup() { return cGroup; }

		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//val=StringTerm
		public Assignment getValAssignment_3() { return cValAssignment_3; }

		//StringTerm
		public RuleCall getValStringTermParserRuleCall_3_0() { return cValStringTermParserRuleCall_3_0; }
	}

	public class ClaimAssumptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ClaimAssumption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssumptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValStringTermParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//ClaimAssumption:
		//	'assumption' name=ID ':' val=StringTerm;
		@Override public ParserRule getRule() { return rule; }

		//'assumption' name=ID ':' val=StringTerm
		public Group getGroup() { return cGroup; }

		//'assumption'
		public Keyword getAssumptionKeyword_0() { return cAssumptionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//val=StringTerm
		public Assignment getValAssignment_3() { return cValAssignment_3; }

		//StringTerm
		public RuleCall getValStringTermParserRuleCall_3_0() { return cValStringTermParserRuleCall_3_0; }
	}

	public class ClaimStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ClaimStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValStringTermParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//ClaimStrategy:
		//	'strategy' name=ID ':' val=StringTerm;
		@Override public ParserRule getRule() { return rule; }

		//'strategy' name=ID ':' val=StringTerm
		public Group getGroup() { return cGroup; }

		//'strategy'
		public Keyword getStrategyKeyword_0() { return cStrategyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//val=StringTerm
		public Assignment getValAssignment_3() { return cValAssignment_3; }

		//StringTerm
		public RuleCall getValStringTermParserRuleCall_3_0() { return cValStringTermParserRuleCall_3_0; }
	}

	public class ClaimTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ClaimText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClaimStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cStrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cStrAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cClaimArgAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cArgAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cArgClaimTextVarCrossReference_1_1_0 = (CrossReference)cArgAssignment_1_1.eContents().get(0);
		private final RuleCall cArgClaimTextVarIDTerminalRuleCall_1_1_0_1 = (RuleCall)cArgClaimTextVarCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPercentSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cUnitAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_2_1_0 = (CrossReference)cUnitAssignment_1_2_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_2_1_0.eContents().get(1);
		
		//ClaimText:
		//	{ClaimString} str=STRING
		//	| {ClaimArg} arg=[ClaimTextVar] ('%' unit=[aadl2::UnitLiteral])?;
		@Override public ParserRule getRule() { return rule; }

		//{ClaimString} str=STRING | {ClaimArg} arg=[ClaimTextVar] ('%' unit=[aadl2::UnitLiteral])?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ClaimString} str=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{ClaimString}
		public Action getClaimStringAction_0_0() { return cClaimStringAction_0_0; }

		//str=STRING
		public Assignment getStrAssignment_0_1() { return cStrAssignment_0_1; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_1_0() { return cStrSTRINGTerminalRuleCall_0_1_0; }

		//{ClaimArg} arg=[ClaimTextVar] ('%' unit=[aadl2::UnitLiteral])?
		public Group getGroup_1() { return cGroup_1; }

		//{ClaimArg}
		public Action getClaimArgAction_1_0() { return cClaimArgAction_1_0; }

		//arg=[ClaimTextVar]
		public Assignment getArgAssignment_1_1() { return cArgAssignment_1_1; }

		//[ClaimTextVar]
		public CrossReference getArgClaimTextVarCrossReference_1_1_0() { return cArgClaimTextVarCrossReference_1_1_0; }

		//ID
		public RuleCall getArgClaimTextVarIDTerminalRuleCall_1_1_0_1() { return cArgClaimTextVarIDTerminalRuleCall_1_1_0_1; }

		//('%' unit=[aadl2::UnitLiteral])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'%'
		public Keyword getPercentSignKeyword_1_2_0() { return cPercentSignKeyword_1_2_0; }

		//unit=[aadl2::UnitLiteral]
		public Assignment getUnitAssignment_1_2_1() { return cUnitAssignment_1_2_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_2_1_0() { return cUnitUnitLiteralCrossReference_1_2_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_2_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_2_1_0_1; }
	}

	public class ClaimTextVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ClaimTextVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLetBindingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClaimTextVar:
		//	Arg | ConstantDefinition | LetBinding;
		@Override public ParserRule getRule() { return rule; }

		//Arg | ConstantDefinition | LetBinding
		public Alternatives getAlternatives() { return cAlternatives; }

		//Arg
		public RuleCall getArgParserRuleCall_0() { return cArgParserRuleCall_0; }

		//ConstantDefinition
		public RuleCall getConstantDefinitionParserRuleCall_1() { return cConstantDefinitionParserRuleCall_1; }

		//LetBinding
		public RuleCall getLetBindingParserRuleCall_2() { return cLetBindingParserRuleCall_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.Expr");
		private final RuleCall cImpliesExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ImpliesExpr;
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall() { return cImpliesExprParserRuleCall; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?;
		@Override public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op='=>')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op='=>'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='=>'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'=>'
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_0_1_0_0 = (Keyword)cOpAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cOpOrelseKeyword_1_0_0_1_1_0 = (Keyword)cOpAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} (op='or' | op='orelse'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} (op='or' | op='orelse')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='or' | op='orelse'
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//op='or'
		public Assignment getOpAssignment_1_0_0_1_0() { return cOpAssignment_1_0_0_1_0; }

		//'or'
		public Keyword getOpOrKeyword_1_0_0_1_0_0() { return cOpOrKeyword_1_0_0_1_0_0; }

		//op='orelse'
		public Assignment getOpAssignment_1_0_0_1_1() { return cOpAssignment_1_0_0_1_1; }

		//'orelse'
		public Keyword getOpOrelseKeyword_1_0_0_1_1_0() { return cOpOrelseKeyword_1_0_0_1_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInstanceOfExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cOpAndKeyword_1_0_0_1_0_0 = (Keyword)cOpAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cOpAndthenKeyword_1_0_0_1_1_0 = (Keyword)cOpAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightInstanceOfExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr Expr:
		//	InstanceOfExpr (=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=InstanceOfExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//InstanceOfExpr (=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=InstanceOfExpr)*
		public Group getGroup() { return cGroup; }

		//InstanceOfExpr
		public RuleCall getInstanceOfExprParserRuleCall_0() { return cInstanceOfExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=InstanceOfExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} (op='and' | op='andthen'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} (op='and' | op='andthen')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='and' | op='andthen'
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//op='and'
		public Assignment getOpAssignment_1_0_0_1_0() { return cOpAssignment_1_0_0_1_0; }

		//'and'
		public Keyword getOpAndKeyword_1_0_0_1_0_0() { return cOpAndKeyword_1_0_0_1_0_0; }

		//op='andthen'
		public Assignment getOpAssignment_1_0_0_1_1() { return cOpAssignment_1_0_0_1_1; }

		//'andthen'
		public Keyword getOpAndthenKeyword_1_0_0_1_1_0() { return cOpAndthenKeyword_1_0_0_1_1_0; }

		//right=InstanceOfExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//InstanceOfExpr
		public RuleCall getRightInstanceOfExprParserRuleCall_1_1_0() { return cRightInstanceOfExprParserRuleCall_1_1_0; }
	}

	public class InstanceOfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.InstanceOfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cInstanceOfExprExprAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeBaseTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//InstanceOfExpr Expr:
		//	RelationalExpr (=> ({InstanceOfExpr.expr=current} 'instanceof') type=BaseType)?;
		@Override public ParserRule getRule() { return rule; }

		//RelationalExpr (=> ({InstanceOfExpr.expr=current} 'instanceof') type=BaseType)?
		public Group getGroup() { return cGroup; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }

		//(=> ({InstanceOfExpr.expr=current} 'instanceof') type=BaseType)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({InstanceOfExpr.expr=current} 'instanceof')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{InstanceOfExpr.expr=current} 'instanceof'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{InstanceOfExpr.expr=current}
		public Action getInstanceOfExprExprAction_1_0_0_0() { return cInstanceOfExprExprAction_1_0_0_0; }

		//'instanceof'
		public Keyword getInstanceofKeyword_1_0_0_1() { return cInstanceofKeyword_1_0_0_1; }

		//type=BaseType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//BaseType
		public RuleCall getTypeBaseTypeParserRuleCall_1_1_0() { return cTypeBaseTypeParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//RelationalOp:
		//	'<' | '<=' | '>' | '>=' | '=' | '<>';
		@Override public ParserRule getRule() { return rule; }

		//'<' | '<=' | '>' | '>=' | '=' | '<>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr Expr:
		//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
		@Override public ParserRule getRule() { return rule; }

		//PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=RelationalOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_1_0() { return cRightPlusExprParserRuleCall_1_1_0; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTimesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr Expr:
		//	TimesExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//TimesExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*
		public Group getGroup() { return cGroup; }

		//TimesExpr
		public RuleCall getTimesExprParserRuleCall_0() { return cTimesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('+' | '-'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=('+' | '-')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('+' | '-')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=TimesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TimesExpr
		public RuleCall getRightTimesExprParserRuleCall_1_1_0() { return cRightTimesExprParserRuleCall_1_1_0; }
	}

	public class TimesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.TimesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_0_1_0_2 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TimesExpr Expr:
		//	ExpExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//ExpExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*
		public Group getGroup() { return cGroup; }

		//ExpExpr
		public RuleCall getExpExprParserRuleCall_0() { return cExpExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('*' | '/' | '%'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=('*' | '/' | '%')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('*' | '/' | '%')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('*' | '/' | '%')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//'%'
		public Keyword getOpPercentSignKeyword_1_0_0_1_0_2() { return cOpPercentSignKeyword_1_0_0_1_0_2; }

		//right=ExpExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ExpExpr
		public RuleCall getRightExpExprParserRuleCall_1_1_0() { return cRightExpExprParserRuleCall_1_1_0; }
	}

	public class ExpExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ExpExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ExpExpr Expr:
		//	PrefixExpr (=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//PrefixExpr (=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*
		public Group getGroup() { return cGroup; }

		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op='^')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op='^'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='^'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'^'
		public Keyword getOpCircumflexAccentKeyword_1_0_0_1_0() { return cOpCircumflexAccentKeyword_1_0_0_1_0; }

		//right=PrefixExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrefixExpr
		public RuleCall getRightPrefixExprParserRuleCall_1_1_0() { return cRightPrefixExprParserRuleCall_1_1_0; }
	}

	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCastExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeBaseTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExprPrefixExprParserRuleCall_1_4_0 = (RuleCall)cExprAssignment_1_4.eContents().get(0);
		private final RuleCall cAtomicExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrefixExpr Expr:
		//	{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
		//	| {CastExpr} '(' type=BaseType ')' expr=PrefixExpr
		//	| AtomicExpr;
		@Override public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=('-' | 'not') expr=PrefixExpr | {CastExpr} '(' type=BaseType ')' expr=PrefixExpr | AtomicExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=('-' | 'not')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//('-' | 'not')
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//'not'
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }

		//{CastExpr} '(' type=BaseType ')' expr=PrefixExpr
		public Group getGroup_1() { return cGroup_1; }

		//{CastExpr}
		public Action getCastExprAction_1_0() { return cCastExprAction_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//type=BaseType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//BaseType
		public RuleCall getTypeBaseTypeParserRuleCall_1_2_0() { return cTypeBaseTypeParserRuleCall_1_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_1_4() { return cExprAssignment_1_4; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_1_4_0() { return cExprPrefixExprParserRuleCall_1_4_0; }

		//AtomicExpr
		public RuleCall getAtomicExprParserRuleCall_2() { return cAtomicExprParserRuleCall_2; }
	}

	public class AtomicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.AtomicExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIdExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cIdNamedElementCrossReference_0_1_0 = (CrossReference)cIdAssignment_0_1.eContents().get(0);
		private final RuleCall cIdNamedElementQCREFParserRuleCall_0_1_0_1 = (RuleCall)cIdNamedElementCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cThisExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubNestedDotIDParserRuleCall_1_2_1_0 = (RuleCall)cSubAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFailExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFailKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cValAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cValExprParserRuleCall_2_2_0_0 = (RuleCall)cValAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cAlternatives_2_2.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cFailmsgAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cFailmsgClaimTextParserRuleCall_2_2_1_1_0 = (RuleCall)cFailmsgAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_2_2_1_2 = (Keyword)cGroup_2_2_1.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValIntegerTermParserRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRealExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValRealTermParserRuleCall_4_1_0 = (RuleCall)cValAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBoolExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValBooleanLiteralParserRuleCall_5_1_0 = (RuleCall)cValAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStringExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValStringTermParserRuleCall_6_1_0 = (RuleCall)cValAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cIfThenElseExprAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cIfKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cCondAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_7_2_0 = (RuleCall)cCondAssignment_7_2.eContents().get(0);
		private final Keyword cThenKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cThenAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cThenExprParserRuleCall_7_4_0 = (RuleCall)cThenAssignment_7_4.eContents().get(0);
		private final Keyword cElseKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Assignment cElseAssignment_7_6 = (Assignment)cGroup_7.eContents().get(6);
		private final RuleCall cElseExprParserRuleCall_7_6_0 = (RuleCall)cElseAssignment_7_6.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cQuantifiedExprAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cQuantAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Alternatives cQuantAlternatives_8_1_0 = (Alternatives)cQuantAssignment_8_1.eContents().get(0);
		private final Keyword cQuantForallKeyword_8_1_0_0 = (Keyword)cQuantAlternatives_8_1_0.eContents().get(0);
		private final Keyword cQuantExistsKeyword_8_1_0_1 = (Keyword)cQuantAlternatives_8_1_0.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cArgsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_8_2_1_0 = (RuleCall)cArgsAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_2_2 = (Keyword)cGroup_8_2.eContents().get(2);
		private final Keyword cFullStopKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cExprAssignment_8_4 = (Assignment)cGroup_8.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_8_4_0 = (RuleCall)cExprAssignment_8_4.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cGroup_9.eContents().get(0);
		private final Action cLibraryFnCallExprAction_9_0_0 = (Action)cGroup_9_0.eContents().get(0);
		private final Assignment cLibNameAssignment_9_0_1 = (Assignment)cGroup_9_0.eContents().get(1);
		private final RuleCall cLibNameIDTerminalRuleCall_9_0_1_0 = (RuleCall)cLibNameAssignment_9_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_9_0_2 = (Keyword)cGroup_9_0.eContents().get(2);
		private final Assignment cFnNameAssignment_9_0_3 = (Assignment)cGroup_9_0.eContents().get(3);
		private final RuleCall cFnNameIDTerminalRuleCall_9_0_3_0 = (RuleCall)cFnNameAssignment_9_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_0_4 = (Keyword)cGroup_9_0.eContents().get(4);
		private final Group cGroup_9_0_5 = (Group)cGroup_9_0.eContents().get(5);
		private final Assignment cArgsAssignment_9_0_5_0 = (Assignment)cGroup_9_0_5.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_9_0_5_0_0 = (RuleCall)cArgsAssignment_9_0_5_0.eContents().get(0);
		private final Group cGroup_9_0_5_1 = (Group)cGroup_9_0_5.eContents().get(1);
		private final Keyword cCommaKeyword_9_0_5_1_0 = (Keyword)cGroup_9_0_5_1.eContents().get(0);
		private final Assignment cArgsAssignment_9_0_5_1_1 = (Assignment)cGroup_9_0_5_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_9_0_5_1_1_0 = (RuleCall)cArgsAssignment_9_0_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_0_6 = (Keyword)cGroup_9_0.eContents().get(6);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cBuiltInFnCallExprAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cFnAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cFnBuiltInFnParserRuleCall_10_1_0 = (RuleCall)cFnAssignment_10_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Assignment cArgsAssignment_10_3_0 = (Assignment)cGroup_10_3.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_10_3_0_0 = (RuleCall)cArgsAssignment_10_3_0.eContents().get(0);
		private final Group cGroup_10_3_1 = (Group)cGroup_10_3.eContents().get(1);
		private final Keyword cCommaKeyword_10_3_1_0 = (Keyword)cGroup_10_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_10_3_1_1 = (Assignment)cGroup_10_3_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_10_3_1_1_0 = (RuleCall)cArgsAssignment_10_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cFnCallExprAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cFnAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cFnFunctionDefinitionCrossReference_11_1_0 = (CrossReference)cFnAssignment_11_1.eContents().get(0);
		private final RuleCall cFnFunctionDefinitionIDTerminalRuleCall_11_1_0_1 = (RuleCall)cFnFunctionDefinitionCrossReference_11_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Group cGroup_11_3 = (Group)cGroup_11.eContents().get(3);
		private final Assignment cArgsAssignment_11_3_0 = (Assignment)cGroup_11_3.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_11_3_0_0 = (RuleCall)cArgsAssignment_11_3_0.eContents().get(0);
		private final Group cGroup_11_3_1 = (Group)cGroup_11_3.eContents().get(1);
		private final Keyword cCommaKeyword_11_3_1_0 = (Keyword)cGroup_11_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_11_3_1_1 = (Assignment)cGroup_11_3_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_11_3_1_1_0 = (RuleCall)cArgsAssignment_11_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cLintExprAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Assignment cLintStmtAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cLintStmtLintStatementParserRuleCall_12_1_0 = (RuleCall)cLintStmtAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cLeftSquareBracketKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final RuleCall cExprParserRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final Alternatives cAlternatives_13_2 = (Alternatives)cGroup_13.eContents().get(2);
		private final Group cGroup_13_2_0 = (Group)cAlternatives_13_2.eContents().get(0);
		private final Action cListFilterMapExprMapAction_13_2_0_0 = (Action)cGroup_13_2_0.eContents().get(0);
		private final Keyword cForKeyword_13_2_0_1 = (Keyword)cGroup_13_2_0.eContents().get(1);
		private final Group cGroup_13_2_0_2 = (Group)cGroup_13_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_13_2_0_2_0 = (Keyword)cGroup_13_2_0_2.eContents().get(0);
		private final Assignment cArgsAssignment_13_2_0_2_1 = (Assignment)cGroup_13_2_0_2.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_13_2_0_2_1_0 = (RuleCall)cArgsAssignment_13_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_2_0_2_2 = (Keyword)cGroup_13_2_0_2.eContents().get(2);
		private final Group cGroup_13_2_0_3 = (Group)cGroup_13_2_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_13_2_0_3_0 = (Keyword)cGroup_13_2_0_3.eContents().get(0);
		private final Assignment cFilterAssignment_13_2_0_3_1 = (Assignment)cGroup_13_2_0_3.eContents().get(1);
		private final RuleCall cFilterExprParserRuleCall_13_2_0_3_1_0 = (RuleCall)cFilterAssignment_13_2_0_3_1.eContents().get(0);
		private final Group cGroup_13_2_1 = (Group)cAlternatives_13_2.eContents().get(1);
		private final Action cListExprExprsAction_13_2_1_0 = (Action)cGroup_13_2_1.eContents().get(0);
		private final Group cGroup_13_2_1_1 = (Group)cGroup_13_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_13_2_1_1_0 = (Keyword)cGroup_13_2_1_1.eContents().get(0);
		private final Assignment cExprsAssignment_13_2_1_1_1 = (Assignment)cGroup_13_2_1_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_13_2_1_1_1_0 = (RuleCall)cExprsAssignment_13_2_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cLeftCurlyBracketKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final RuleCall cExprParserRuleCall_14_1 = (RuleCall)cGroup_14.eContents().get(1);
		private final Alternatives cAlternatives_14_2 = (Alternatives)cGroup_14.eContents().get(2);
		private final Group cGroup_14_2_0 = (Group)cAlternatives_14_2.eContents().get(0);
		private final Action cSetFilterMapExprMapAction_14_2_0_0 = (Action)cGroup_14_2_0.eContents().get(0);
		private final Keyword cForKeyword_14_2_0_1 = (Keyword)cGroup_14_2_0.eContents().get(1);
		private final Group cGroup_14_2_0_2 = (Group)cGroup_14_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_14_2_0_2_0 = (Keyword)cGroup_14_2_0_2.eContents().get(0);
		private final Assignment cArgsAssignment_14_2_0_2_1 = (Assignment)cGroup_14_2_0_2.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_14_2_0_2_1_0 = (RuleCall)cArgsAssignment_14_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_2_0_2_2 = (Keyword)cGroup_14_2_0_2.eContents().get(2);
		private final Group cGroup_14_2_0_3 = (Group)cGroup_14_2_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_14_2_0_3_0 = (Keyword)cGroup_14_2_0_3.eContents().get(0);
		private final Assignment cFilterAssignment_14_2_0_3_1 = (Assignment)cGroup_14_2_0_3.eContents().get(1);
		private final RuleCall cFilterExprParserRuleCall_14_2_0_3_1_0 = (RuleCall)cFilterAssignment_14_2_0_3_1.eContents().get(0);
		private final Group cGroup_14_2_1 = (Group)cAlternatives_14_2.eContents().get(1);
		private final Action cSetExprExprsAction_14_2_1_0 = (Action)cGroup_14_2_1.eContents().get(0);
		private final Group cGroup_14_2_1_1 = (Group)cGroup_14_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_14_2_1_1_0 = (Keyword)cGroup_14_2_1_1.eContents().get(0);
		private final Assignment cExprsAssignment_14_2_1_1_1 = (Assignment)cGroup_14_2_1_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_14_2_1_1_1_0 = (RuleCall)cExprsAssignment_14_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cListExprAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cSetExprAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cLetExprAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cLetKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Assignment cBindingAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cBindingLetBindingParserRuleCall_17_2_0 = (RuleCall)cBindingAssignment_17_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_17_3 = (Keyword)cGroup_17.eContents().get(3);
		private final Assignment cExprAssignment_17_4 = (Assignment)cGroup_17.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_17_4_0 = (RuleCall)cExprAssignment_17_4.eContents().get(0);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Keyword cLeftParenthesisKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final RuleCall cExprParserRuleCall_18_1 = (RuleCall)cGroup_18.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_18_2 = (Keyword)cGroup_18.eContents().get(2);
		
		//AtomicExpr Expr:
		//	{IdExpr} id=[aadl2::NamedElement|QCREF] | {ThisExpr} 'this' ('.' sub=NestedDotID)?
		//	| {FailExpr} 'fail' (val=Expr | '**' failmsg+=ClaimText+ '**') | {IntExpr} val=IntegerTerm
		//	| {RealExpr} val=RealTerm
		//	| {BoolExpr} val=BooleanLiteral
		//	| {StringExpr} val=StringTerm
		//	| {IfThenElseExpr} 'if' cond=Expr 'then' then=Expr 'else' else=Expr
		//	| {QuantifiedExpr} quant=('forall' | 'exists') ('(' args+=Arg ')')+ '.' expr=Expr
		//	| => ({LibraryFnCallExpr} libName=ID '.' fnName=ID '(' (args+=Expr (',' args+=Expr)*)? ')') | {BuiltInFnCallExpr}
		//	fn=BuiltInFn '(' (args+=Expr (',' args+=Expr)*)? ')'
		//	| {FnCallExpr} fn=[FunctionDefinition] '(' (args+=Expr (',' args+=Expr)*)? ')'
		//	| {LintExpr} lintStmt=LintStatement
		//	| '[' Expr ({ListFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {ListExpr.exprs+=current}
		//	(',' exprs+=Expr)*) ']'
		//	| '{' Expr ({SetFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {SetExpr.exprs+=current}
		//	(',' exprs+=Expr)*) '}'
		//	| {ListExpr} '[' ']'
		//	| {SetExpr} '{' '}'
		//	| {LetExpr} 'let' binding=LetBinding ';' expr=Expr
		//	| '(' Expr ')';
		@Override public ParserRule getRule() { return rule; }

		//{IdExpr} id=[aadl2::NamedElement|QCREF] | {ThisExpr} 'this' ('.' sub=NestedDotID)? | {FailExpr} 'fail' (val=Expr | '**'
		//failmsg+=ClaimText+ '**') | {IntExpr} val=IntegerTerm | {RealExpr} val=RealTerm | {BoolExpr} val=BooleanLiteral |
		//{StringExpr} val=StringTerm | {IfThenElseExpr} 'if' cond=Expr 'then' then=Expr 'else' else=Expr | {QuantifiedExpr}
		//quant=('forall' | 'exists') ('(' args+=Arg ')')+ '.' expr=Expr | => ({LibraryFnCallExpr} libName=ID '.' fnName=ID '('
		//(args+=Expr (',' args+=Expr)*)? ')') | {BuiltInFnCallExpr} fn=BuiltInFn '(' (args+=Expr (',' args+=Expr)*)? ')' |
		//{FnCallExpr} fn=[FunctionDefinition] '(' (args+=Expr (',' args+=Expr)*)? ')' | {LintExpr} lintStmt=LintStatement | '['
		//Expr ({ListFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {ListExpr.exprs+=current} (','
		//exprs+=Expr)*) ']' | '{' Expr ({SetFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? |
		//{SetExpr.exprs+=current} (',' exprs+=Expr)*) '}' | {ListExpr} '[' ']' | {SetExpr} '{' '}' | {LetExpr} 'let'
		//binding=LetBinding ';' expr=Expr | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IdExpr} id=[aadl2::NamedElement|QCREF]
		public Group getGroup_0() { return cGroup_0; }

		//{IdExpr}
		public Action getIdExprAction_0_0() { return cIdExprAction_0_0; }

		//id=[aadl2::NamedElement|QCREF]
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//[aadl2::NamedElement|QCREF]
		public CrossReference getIdNamedElementCrossReference_0_1_0() { return cIdNamedElementCrossReference_0_1_0; }

		//QCREF
		public RuleCall getIdNamedElementQCREFParserRuleCall_0_1_0_1() { return cIdNamedElementQCREFParserRuleCall_0_1_0_1; }

		//{ThisExpr} 'this' ('.' sub=NestedDotID)?
		public Group getGroup_1() { return cGroup_1; }

		//{ThisExpr}
		public Action getThisExprAction_1_0() { return cThisExprAction_1_0; }

		//'this'
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }

		//('.' sub=NestedDotID)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//sub=NestedDotID
		public Assignment getSubAssignment_1_2_1() { return cSubAssignment_1_2_1; }

		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_1_2_1_0() { return cSubNestedDotIDParserRuleCall_1_2_1_0; }

		//{FailExpr} 'fail' (val=Expr | '**' failmsg+=ClaimText+ '**')
		public Group getGroup_2() { return cGroup_2; }

		//{FailExpr}
		public Action getFailExprAction_2_0() { return cFailExprAction_2_0; }

		//'fail'
		public Keyword getFailKeyword_2_1() { return cFailKeyword_2_1; }

		//val=Expr | '**' failmsg+=ClaimText+ '**'
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//val=Expr
		public Assignment getValAssignment_2_2_0() { return cValAssignment_2_2_0; }

		//Expr
		public RuleCall getValExprParserRuleCall_2_2_0_0() { return cValExprParserRuleCall_2_2_0_0; }

		//'**' failmsg+=ClaimText+ '**'
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_2_2_1_0() { return cAsteriskAsteriskKeyword_2_2_1_0; }

		//failmsg+=ClaimText+
		public Assignment getFailmsgAssignment_2_2_1_1() { return cFailmsgAssignment_2_2_1_1; }

		//ClaimText
		public RuleCall getFailmsgClaimTextParserRuleCall_2_2_1_1_0() { return cFailmsgClaimTextParserRuleCall_2_2_1_1_0; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_2_2_1_2() { return cAsteriskAsteriskKeyword_2_2_1_2; }

		//{IntExpr} val=IntegerTerm
		public Group getGroup_3() { return cGroup_3; }

		//{IntExpr}
		public Action getIntExprAction_3_0() { return cIntExprAction_3_0; }

		//val=IntegerTerm
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }

		//IntegerTerm
		public RuleCall getValIntegerTermParserRuleCall_3_1_0() { return cValIntegerTermParserRuleCall_3_1_0; }

		//{RealExpr} val=RealTerm
		public Group getGroup_4() { return cGroup_4; }

		//{RealExpr}
		public Action getRealExprAction_4_0() { return cRealExprAction_4_0; }

		//val=RealTerm
		public Assignment getValAssignment_4_1() { return cValAssignment_4_1; }

		//RealTerm
		public RuleCall getValRealTermParserRuleCall_4_1_0() { return cValRealTermParserRuleCall_4_1_0; }

		//{BoolExpr} val=BooleanLiteral
		public Group getGroup_5() { return cGroup_5; }

		//{BoolExpr}
		public Action getBoolExprAction_5_0() { return cBoolExprAction_5_0; }

		//val=BooleanLiteral
		public Assignment getValAssignment_5_1() { return cValAssignment_5_1; }

		//BooleanLiteral
		public RuleCall getValBooleanLiteralParserRuleCall_5_1_0() { return cValBooleanLiteralParserRuleCall_5_1_0; }

		//{StringExpr} val=StringTerm
		public Group getGroup_6() { return cGroup_6; }

		//{StringExpr}
		public Action getStringExprAction_6_0() { return cStringExprAction_6_0; }

		//val=StringTerm
		public Assignment getValAssignment_6_1() { return cValAssignment_6_1; }

		//StringTerm
		public RuleCall getValStringTermParserRuleCall_6_1_0() { return cValStringTermParserRuleCall_6_1_0; }

		//{IfThenElseExpr} 'if' cond=Expr 'then' then=Expr 'else' else=Expr
		public Group getGroup_7() { return cGroup_7; }

		//{IfThenElseExpr}
		public Action getIfThenElseExprAction_7_0() { return cIfThenElseExprAction_7_0; }

		//'if'
		public Keyword getIfKeyword_7_1() { return cIfKeyword_7_1; }

		//cond=Expr
		public Assignment getCondAssignment_7_2() { return cCondAssignment_7_2; }

		//Expr
		public RuleCall getCondExprParserRuleCall_7_2_0() { return cCondExprParserRuleCall_7_2_0; }

		//'then'
		public Keyword getThenKeyword_7_3() { return cThenKeyword_7_3; }

		//then=Expr
		public Assignment getThenAssignment_7_4() { return cThenAssignment_7_4; }

		//Expr
		public RuleCall getThenExprParserRuleCall_7_4_0() { return cThenExprParserRuleCall_7_4_0; }

		//'else'
		public Keyword getElseKeyword_7_5() { return cElseKeyword_7_5; }

		//else=Expr
		public Assignment getElseAssignment_7_6() { return cElseAssignment_7_6; }

		//Expr
		public RuleCall getElseExprParserRuleCall_7_6_0() { return cElseExprParserRuleCall_7_6_0; }

		//{QuantifiedExpr} quant=('forall' | 'exists') ('(' args+=Arg ')')+ '.' expr=Expr
		public Group getGroup_8() { return cGroup_8; }

		//{QuantifiedExpr}
		public Action getQuantifiedExprAction_8_0() { return cQuantifiedExprAction_8_0; }

		//quant=('forall' | 'exists')
		public Assignment getQuantAssignment_8_1() { return cQuantAssignment_8_1; }

		//('forall' | 'exists')
		public Alternatives getQuantAlternatives_8_1_0() { return cQuantAlternatives_8_1_0; }

		//'forall'
		public Keyword getQuantForallKeyword_8_1_0_0() { return cQuantForallKeyword_8_1_0_0; }

		//'exists'
		public Keyword getQuantExistsKeyword_8_1_0_1() { return cQuantExistsKeyword_8_1_0_1; }

		//('(' args+=Arg ')')+
		public Group getGroup_8_2() { return cGroup_8_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_8_2_0() { return cLeftParenthesisKeyword_8_2_0; }

		//args+=Arg
		public Assignment getArgsAssignment_8_2_1() { return cArgsAssignment_8_2_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_8_2_1_0() { return cArgsArgParserRuleCall_8_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_8_2_2() { return cRightParenthesisKeyword_8_2_2; }

		//'.'
		public Keyword getFullStopKeyword_8_3() { return cFullStopKeyword_8_3; }

		//expr=Expr
		public Assignment getExprAssignment_8_4() { return cExprAssignment_8_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_8_4_0() { return cExprExprParserRuleCall_8_4_0; }

		//=> ({LibraryFnCallExpr} libName=ID '.' fnName=ID '(' (args+=Expr (',' args+=Expr)*)? ')')
		public Group getGroup_9() { return cGroup_9; }

		//{LibraryFnCallExpr} libName=ID '.' fnName=ID '(' (args+=Expr (',' args+=Expr)*)? ')'
		public Group getGroup_9_0() { return cGroup_9_0; }

		//{LibraryFnCallExpr}
		public Action getLibraryFnCallExprAction_9_0_0() { return cLibraryFnCallExprAction_9_0_0; }

		//libName=ID
		public Assignment getLibNameAssignment_9_0_1() { return cLibNameAssignment_9_0_1; }

		//ID
		public RuleCall getLibNameIDTerminalRuleCall_9_0_1_0() { return cLibNameIDTerminalRuleCall_9_0_1_0; }

		//'.'
		public Keyword getFullStopKeyword_9_0_2() { return cFullStopKeyword_9_0_2; }

		//fnName=ID
		public Assignment getFnNameAssignment_9_0_3() { return cFnNameAssignment_9_0_3; }

		//ID
		public RuleCall getFnNameIDTerminalRuleCall_9_0_3_0() { return cFnNameIDTerminalRuleCall_9_0_3_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_9_0_4() { return cLeftParenthesisKeyword_9_0_4; }

		//(args+=Expr (',' args+=Expr)*)?
		public Group getGroup_9_0_5() { return cGroup_9_0_5; }

		//args+=Expr
		public Assignment getArgsAssignment_9_0_5_0() { return cArgsAssignment_9_0_5_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_9_0_5_0_0() { return cArgsExprParserRuleCall_9_0_5_0_0; }

		//(',' args+=Expr)*
		public Group getGroup_9_0_5_1() { return cGroup_9_0_5_1; }

		//','
		public Keyword getCommaKeyword_9_0_5_1_0() { return cCommaKeyword_9_0_5_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_9_0_5_1_1() { return cArgsAssignment_9_0_5_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_9_0_5_1_1_0() { return cArgsExprParserRuleCall_9_0_5_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9_0_6() { return cRightParenthesisKeyword_9_0_6; }

		//{BuiltInFnCallExpr} fn=BuiltInFn '(' (args+=Expr (',' args+=Expr)*)? ')'
		public Group getGroup_10() { return cGroup_10; }

		//{BuiltInFnCallExpr}
		public Action getBuiltInFnCallExprAction_10_0() { return cBuiltInFnCallExprAction_10_0; }

		//fn=BuiltInFn
		public Assignment getFnAssignment_10_1() { return cFnAssignment_10_1; }

		//BuiltInFn
		public RuleCall getFnBuiltInFnParserRuleCall_10_1_0() { return cFnBuiltInFnParserRuleCall_10_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }

		//(args+=Expr (',' args+=Expr)*)?
		public Group getGroup_10_3() { return cGroup_10_3; }

		//args+=Expr
		public Assignment getArgsAssignment_10_3_0() { return cArgsAssignment_10_3_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_10_3_0_0() { return cArgsExprParserRuleCall_10_3_0_0; }

		//(',' args+=Expr)*
		public Group getGroup_10_3_1() { return cGroup_10_3_1; }

		//','
		public Keyword getCommaKeyword_10_3_1_0() { return cCommaKeyword_10_3_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_10_3_1_1() { return cArgsAssignment_10_3_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_10_3_1_1_0() { return cArgsExprParserRuleCall_10_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }

		//{FnCallExpr} fn=[FunctionDefinition] '(' (args+=Expr (',' args+=Expr)*)? ')'
		public Group getGroup_11() { return cGroup_11; }

		//{FnCallExpr}
		public Action getFnCallExprAction_11_0() { return cFnCallExprAction_11_0; }

		//fn=[FunctionDefinition]
		public Assignment getFnAssignment_11_1() { return cFnAssignment_11_1; }

		//[FunctionDefinition]
		public CrossReference getFnFunctionDefinitionCrossReference_11_1_0() { return cFnFunctionDefinitionCrossReference_11_1_0; }

		//ID
		public RuleCall getFnFunctionDefinitionIDTerminalRuleCall_11_1_0_1() { return cFnFunctionDefinitionIDTerminalRuleCall_11_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }

		//(args+=Expr (',' args+=Expr)*)?
		public Group getGroup_11_3() { return cGroup_11_3; }

		//args+=Expr
		public Assignment getArgsAssignment_11_3_0() { return cArgsAssignment_11_3_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_11_3_0_0() { return cArgsExprParserRuleCall_11_3_0_0; }

		//(',' args+=Expr)*
		public Group getGroup_11_3_1() { return cGroup_11_3_1; }

		//','
		public Keyword getCommaKeyword_11_3_1_0() { return cCommaKeyword_11_3_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_11_3_1_1() { return cArgsAssignment_11_3_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_11_3_1_1_0() { return cArgsExprParserRuleCall_11_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_11_4() { return cRightParenthesisKeyword_11_4; }

		//{LintExpr} lintStmt=LintStatement
		public Group getGroup_12() { return cGroup_12; }

		//{LintExpr}
		public Action getLintExprAction_12_0() { return cLintExprAction_12_0; }

		//lintStmt=LintStatement
		public Assignment getLintStmtAssignment_12_1() { return cLintStmtAssignment_12_1; }

		//LintStatement
		public RuleCall getLintStmtLintStatementParserRuleCall_12_1_0() { return cLintStmtLintStatementParserRuleCall_12_1_0; }

		//'[' Expr ({ListFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {ListExpr.exprs+=current} (','
		//exprs+=Expr)*) ']'
		public Group getGroup_13() { return cGroup_13; }

		//'['
		public Keyword getLeftSquareBracketKeyword_13_0() { return cLeftSquareBracketKeyword_13_0; }

		//Expr
		public RuleCall getExprParserRuleCall_13_1() { return cExprParserRuleCall_13_1; }

		//{ListFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {ListExpr.exprs+=current} (','
		//exprs+=Expr)*
		public Alternatives getAlternatives_13_2() { return cAlternatives_13_2; }

		//{ListFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)?
		public Group getGroup_13_2_0() { return cGroup_13_2_0; }

		//{ListFilterMapExpr.map=current}
		public Action getListFilterMapExprMapAction_13_2_0_0() { return cListFilterMapExprMapAction_13_2_0_0; }

		//'for'
		public Keyword getForKeyword_13_2_0_1() { return cForKeyword_13_2_0_1; }

		//('(' args+=Arg ')')+
		public Group getGroup_13_2_0_2() { return cGroup_13_2_0_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_13_2_0_2_0() { return cLeftParenthesisKeyword_13_2_0_2_0; }

		//args+=Arg
		public Assignment getArgsAssignment_13_2_0_2_1() { return cArgsAssignment_13_2_0_2_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_13_2_0_2_1_0() { return cArgsArgParserRuleCall_13_2_0_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_13_2_0_2_2() { return cRightParenthesisKeyword_13_2_0_2_2; }

		//('|' filter=Expr)?
		public Group getGroup_13_2_0_3() { return cGroup_13_2_0_3; }

		//'|'
		public Keyword getVerticalLineKeyword_13_2_0_3_0() { return cVerticalLineKeyword_13_2_0_3_0; }

		//filter=Expr
		public Assignment getFilterAssignment_13_2_0_3_1() { return cFilterAssignment_13_2_0_3_1; }

		//Expr
		public RuleCall getFilterExprParserRuleCall_13_2_0_3_1_0() { return cFilterExprParserRuleCall_13_2_0_3_1_0; }

		//{ListExpr.exprs+=current} (',' exprs+=Expr)*
		public Group getGroup_13_2_1() { return cGroup_13_2_1; }

		//{ListExpr.exprs+=current}
		public Action getListExprExprsAction_13_2_1_0() { return cListExprExprsAction_13_2_1_0; }

		//(',' exprs+=Expr)*
		public Group getGroup_13_2_1_1() { return cGroup_13_2_1_1; }

		//','
		public Keyword getCommaKeyword_13_2_1_1_0() { return cCommaKeyword_13_2_1_1_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_13_2_1_1_1() { return cExprsAssignment_13_2_1_1_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_13_2_1_1_1_0() { return cExprsExprParserRuleCall_13_2_1_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_13_3() { return cRightSquareBracketKeyword_13_3; }

		//'{' Expr ({SetFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {SetExpr.exprs+=current} (','
		//exprs+=Expr)*) '}'
		public Group getGroup_14() { return cGroup_14; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_14_0() { return cLeftCurlyBracketKeyword_14_0; }

		//Expr
		public RuleCall getExprParserRuleCall_14_1() { return cExprParserRuleCall_14_1; }

		//{SetFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {SetExpr.exprs+=current} (','
		//exprs+=Expr)*
		public Alternatives getAlternatives_14_2() { return cAlternatives_14_2; }

		//{SetFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)?
		public Group getGroup_14_2_0() { return cGroup_14_2_0; }

		//{SetFilterMapExpr.map=current}
		public Action getSetFilterMapExprMapAction_14_2_0_0() { return cSetFilterMapExprMapAction_14_2_0_0; }

		//'for'
		public Keyword getForKeyword_14_2_0_1() { return cForKeyword_14_2_0_1; }

		//('(' args+=Arg ')')+
		public Group getGroup_14_2_0_2() { return cGroup_14_2_0_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_14_2_0_2_0() { return cLeftParenthesisKeyword_14_2_0_2_0; }

		//args+=Arg
		public Assignment getArgsAssignment_14_2_0_2_1() { return cArgsAssignment_14_2_0_2_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_14_2_0_2_1_0() { return cArgsArgParserRuleCall_14_2_0_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_14_2_0_2_2() { return cRightParenthesisKeyword_14_2_0_2_2; }

		//('|' filter=Expr)?
		public Group getGroup_14_2_0_3() { return cGroup_14_2_0_3; }

		//'|'
		public Keyword getVerticalLineKeyword_14_2_0_3_0() { return cVerticalLineKeyword_14_2_0_3_0; }

		//filter=Expr
		public Assignment getFilterAssignment_14_2_0_3_1() { return cFilterAssignment_14_2_0_3_1; }

		//Expr
		public RuleCall getFilterExprParserRuleCall_14_2_0_3_1_0() { return cFilterExprParserRuleCall_14_2_0_3_1_0; }

		//{SetExpr.exprs+=current} (',' exprs+=Expr)*
		public Group getGroup_14_2_1() { return cGroup_14_2_1; }

		//{SetExpr.exprs+=current}
		public Action getSetExprExprsAction_14_2_1_0() { return cSetExprExprsAction_14_2_1_0; }

		//(',' exprs+=Expr)*
		public Group getGroup_14_2_1_1() { return cGroup_14_2_1_1; }

		//','
		public Keyword getCommaKeyword_14_2_1_1_0() { return cCommaKeyword_14_2_1_1_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_14_2_1_1_1() { return cExprsAssignment_14_2_1_1_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_14_2_1_1_1_0() { return cExprsExprParserRuleCall_14_2_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_14_3() { return cRightCurlyBracketKeyword_14_3; }

		//{ListExpr} '[' ']'
		public Group getGroup_15() { return cGroup_15; }

		//{ListExpr}
		public Action getListExprAction_15_0() { return cListExprAction_15_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_15_1() { return cLeftSquareBracketKeyword_15_1; }

		//']'
		public Keyword getRightSquareBracketKeyword_15_2() { return cRightSquareBracketKeyword_15_2; }

		//{SetExpr} '{' '}'
		public Group getGroup_16() { return cGroup_16; }

		//{SetExpr}
		public Action getSetExprAction_16_0() { return cSetExprAction_16_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_16_1() { return cLeftCurlyBracketKeyword_16_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_16_2() { return cRightCurlyBracketKeyword_16_2; }

		//{LetExpr} 'let' binding=LetBinding ';' expr=Expr
		public Group getGroup_17() { return cGroup_17; }

		//{LetExpr}
		public Action getLetExprAction_17_0() { return cLetExprAction_17_0; }

		//'let'
		public Keyword getLetKeyword_17_1() { return cLetKeyword_17_1; }

		//binding=LetBinding
		public Assignment getBindingAssignment_17_2() { return cBindingAssignment_17_2; }

		//LetBinding
		public RuleCall getBindingLetBindingParserRuleCall_17_2_0() { return cBindingLetBindingParserRuleCall_17_2_0; }

		//';'
		public Keyword getSemicolonKeyword_17_3() { return cSemicolonKeyword_17_3; }

		//expr=Expr
		public Assignment getExprAssignment_17_4() { return cExprAssignment_17_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_17_4_0() { return cExprExprParserRuleCall_17_4_0; }

		//'(' Expr ')'
		public Group getGroup_18() { return cGroup_18; }

		//'('
		public Keyword getLeftParenthesisKeyword_18_0() { return cLeftParenthesisKeyword_18_0; }

		//Expr
		public RuleCall getExprParserRuleCall_18_1() { return cExprParserRuleCall_18_1; }

		//')'
		public Keyword getRightParenthesisKeyword_18_2() { return cRightParenthesisKeyword_18_2; }
	}

	public class LetBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.LetBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//LetBinding:
		//	name=ID ':' type=Type '=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' type=Type '=' expr=Expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
	}

	public class BuiltInFnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.BuiltInFn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHas_propertyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProperty_memberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHas_parentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cParentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNameKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTypeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHas_typeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cIs_in_arrayKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cHas_prototypesKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cHas_modesKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cIs_processorKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cIs_virtual_processorKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cIs_systemKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cIs_busKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cIs_virtual_busKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cIs_deviceKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cIs_memoryKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cIs_threadKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cIs_thread_groupKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cIs_processKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cIs_dataKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cIs_subprogramKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cIs_of_typeKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cIs_bound_toKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cHas_memberKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cFeaturesKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cConnectionsKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cEnumerated_valuesKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cSubcomponentsKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cSourceKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cDestinationKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cIs_bidirectionalKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cDirectionKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cIs_event_portKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cIs_abstract_featureKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cIs_data_portKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cIs_portKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cIs_data_accessKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cIs_bus_accessKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cLower_boundKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cUpper_boundKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cMemberKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cLengthKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cSizeKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cSumKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cAppendKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cHeadKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cTailKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cAs_setKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cUnionKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cIntersectKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cAs_listKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cInstanceKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cInstancesKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cDebugKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cAnalysisKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cReceive_errorKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cContain_errorKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cPropagate_errorKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cError_state_reachableKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cFlow_sourceKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cFlow_destinationKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cFlow_elementsKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cFlow_specificationsKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cEnd_to_end_flowsKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		
		//BuiltInFn: // Primary type: aadl
		//	'has_property' | 'property' | 'property_member' | 'has_parent' | 'parent' | 'name' | 'type' | 'has_type' |
		//	'is_in_array' | 'has_prototypes' | 'has_modes' | 'is_processor' | 'is_virtual_processor' | 'is_system' | 'is_bus' |
		//	'is_virtual_bus' | 'is_device' | 'is_memory' | 'is_thread' | 'is_thread_group' | 'is_process' | 'is_data' |
		//	'is_subprogram' | 'is_of_type' | 'is_bound_to' | 'has_member' | 'features' | 'connections' // Primary type: property
		//	| 'enumerated_values' // Primary type: component
		//	| 'subcomponents' // Primary type: connection
		//	| 'source' | 'destination' | 'is_bidirectional' // Primary type: feature
		//	| 'direction' | 'is_event_port' | 'is_abstract_feature' | 'is_data_port' | 'is_port' | 'is_data_access' |
		//	'is_bus_access' // Primary type: range
		//	| 'lower_bound' | 'upper_bound' // Primary type: set or list
		//	| 'member' | 'length' | 'size' // Primary type: list
		//	| 'sum' | 'append' | 'head' | 'tail' | 'as_set' // Primary type: set
		//	| 'union' | 'intersect' | 'as_list' // Other
		//	| 'instance' | 'instances' | 'debug' | 'analysis' // Error Annex
		//	| 'receive_error' // the component can receive an incoming error
		//	| 'contain_error' // the component contain the error
		//	| 'propagate_error' // the component propagate an error
		//	| 'error_state_reachable' // the error state is reachable
		//	| 'flow_source' | 'flow_destination' | 'flow_elements' | 'flow_specifications' | 'end_to_end_flows';
		@Override public ParserRule getRule() { return rule; }

		//// Primary type: aadl
		//'has_property' | 'property' | 'property_member' | 'has_parent' | 'parent' | 'name' | 'type' | 'has_type' | 'is_in_array'
		//| 'has_prototypes' | 'has_modes' | 'is_processor' | 'is_virtual_processor' | 'is_system' | 'is_bus' | 'is_virtual_bus'
		//| 'is_device' | 'is_memory' | 'is_thread' | 'is_thread_group' | 'is_process' | 'is_data' | 'is_subprogram' |
		//'is_of_type' | 'is_bound_to' | 'has_member' | 'features' | 'connections' // Primary type: property
		//| 'enumerated_values' // Primary type: component
		//| 'subcomponents' // Primary type: connection
		//| 'source' | 'destination' | 'is_bidirectional' // Primary type: feature
		//| 'direction' | 'is_event_port' | 'is_abstract_feature' | 'is_data_port' | 'is_port' | 'is_data_access' |
		//'is_bus_access' // Primary type: range
		//| 'lower_bound' | 'upper_bound' // Primary type: set or list
		//| 'member' | 'length' | 'size' // Primary type: list
		//| 'sum' | 'append' | 'head' | 'tail' | 'as_set' // Primary type: set
		//| 'union' | 'intersect' | 'as_list' // Other
		//| 'instance' | 'instances' | 'debug' | 'analysis' // Error Annex
		//| 'receive_error' // the component can receive an incoming error
		//| 'contain_error' // the component contain the error
		//| 'propagate_error' // the component propagate an error
		//| 'error_state_reachable' // the error state is reachable
		//| 'flow_source' | 'flow_destination' | 'flow_elements' | 'flow_specifications' | 'end_to_end_flows'
		public Alternatives getAlternatives() { return cAlternatives; }

		//// Primary type: aadl
		//'has_property'
		public Keyword getHas_propertyKeyword_0() { return cHas_propertyKeyword_0; }

		//'property'
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }

		//'property_member'
		public Keyword getProperty_memberKeyword_2() { return cProperty_memberKeyword_2; }

		//'has_parent'
		public Keyword getHas_parentKeyword_3() { return cHas_parentKeyword_3; }

		//'parent'
		public Keyword getParentKeyword_4() { return cParentKeyword_4; }

		//'name'
		public Keyword getNameKeyword_5() { return cNameKeyword_5; }

		//'type'
		public Keyword getTypeKeyword_6() { return cTypeKeyword_6; }

		//'has_type'
		public Keyword getHas_typeKeyword_7() { return cHas_typeKeyword_7; }

		//'is_in_array'
		public Keyword getIs_in_arrayKeyword_8() { return cIs_in_arrayKeyword_8; }

		//'has_prototypes'
		public Keyword getHas_prototypesKeyword_9() { return cHas_prototypesKeyword_9; }

		//'has_modes'
		public Keyword getHas_modesKeyword_10() { return cHas_modesKeyword_10; }

		//'is_processor'
		public Keyword getIs_processorKeyword_11() { return cIs_processorKeyword_11; }

		//'is_virtual_processor'
		public Keyword getIs_virtual_processorKeyword_12() { return cIs_virtual_processorKeyword_12; }

		//'is_system'
		public Keyword getIs_systemKeyword_13() { return cIs_systemKeyword_13; }

		//'is_bus'
		public Keyword getIs_busKeyword_14() { return cIs_busKeyword_14; }

		//'is_virtual_bus'
		public Keyword getIs_virtual_busKeyword_15() { return cIs_virtual_busKeyword_15; }

		//'is_device'
		public Keyword getIs_deviceKeyword_16() { return cIs_deviceKeyword_16; }

		//'is_memory'
		public Keyword getIs_memoryKeyword_17() { return cIs_memoryKeyword_17; }

		//'is_thread'
		public Keyword getIs_threadKeyword_18() { return cIs_threadKeyword_18; }

		//'is_thread_group'
		public Keyword getIs_thread_groupKeyword_19() { return cIs_thread_groupKeyword_19; }

		//'is_process'
		public Keyword getIs_processKeyword_20() { return cIs_processKeyword_20; }

		//'is_data'
		public Keyword getIs_dataKeyword_21() { return cIs_dataKeyword_21; }

		//'is_subprogram'
		public Keyword getIs_subprogramKeyword_22() { return cIs_subprogramKeyword_22; }

		//'is_of_type'
		public Keyword getIs_of_typeKeyword_23() { return cIs_of_typeKeyword_23; }

		//'is_bound_to'
		public Keyword getIs_bound_toKeyword_24() { return cIs_bound_toKeyword_24; }

		//'has_member'
		public Keyword getHas_memberKeyword_25() { return cHas_memberKeyword_25; }

		//'features'
		public Keyword getFeaturesKeyword_26() { return cFeaturesKeyword_26; }

		//'connections'
		public Keyword getConnectionsKeyword_27() { return cConnectionsKeyword_27; }

		//'enumerated_values'
		public Keyword getEnumerated_valuesKeyword_28() { return cEnumerated_valuesKeyword_28; }

		//'subcomponents'
		public Keyword getSubcomponentsKeyword_29() { return cSubcomponentsKeyword_29; }

		//'source'
		public Keyword getSourceKeyword_30() { return cSourceKeyword_30; }

		//'destination'
		public Keyword getDestinationKeyword_31() { return cDestinationKeyword_31; }

		//'is_bidirectional'
		public Keyword getIs_bidirectionalKeyword_32() { return cIs_bidirectionalKeyword_32; }

		//'direction'
		public Keyword getDirectionKeyword_33() { return cDirectionKeyword_33; }

		//'is_event_port'
		public Keyword getIs_event_portKeyword_34() { return cIs_event_portKeyword_34; }

		//'is_abstract_feature'
		public Keyword getIs_abstract_featureKeyword_35() { return cIs_abstract_featureKeyword_35; }

		//'is_data_port'
		public Keyword getIs_data_portKeyword_36() { return cIs_data_portKeyword_36; }

		//'is_port'
		public Keyword getIs_portKeyword_37() { return cIs_portKeyword_37; }

		//'is_data_access'
		public Keyword getIs_data_accessKeyword_38() { return cIs_data_accessKeyword_38; }

		//'is_bus_access'
		public Keyword getIs_bus_accessKeyword_39() { return cIs_bus_accessKeyword_39; }

		//'lower_bound'
		public Keyword getLower_boundKeyword_40() { return cLower_boundKeyword_40; }

		//'upper_bound'
		public Keyword getUpper_boundKeyword_41() { return cUpper_boundKeyword_41; }

		//'member'
		public Keyword getMemberKeyword_42() { return cMemberKeyword_42; }

		//'length'
		public Keyword getLengthKeyword_43() { return cLengthKeyword_43; }

		//'size'
		public Keyword getSizeKeyword_44() { return cSizeKeyword_44; }

		//'sum'
		public Keyword getSumKeyword_45() { return cSumKeyword_45; }

		//'append'
		public Keyword getAppendKeyword_46() { return cAppendKeyword_46; }

		//'head'
		public Keyword getHeadKeyword_47() { return cHeadKeyword_47; }

		//'tail'
		public Keyword getTailKeyword_48() { return cTailKeyword_48; }

		//'as_set'
		public Keyword getAs_setKeyword_49() { return cAs_setKeyword_49; }

		//'union'
		public Keyword getUnionKeyword_50() { return cUnionKeyword_50; }

		//'intersect'
		public Keyword getIntersectKeyword_51() { return cIntersectKeyword_51; }

		//'as_list'
		public Keyword getAs_listKeyword_52() { return cAs_listKeyword_52; }

		//'instance'
		public Keyword getInstanceKeyword_53() { return cInstanceKeyword_53; }

		//'instances'
		public Keyword getInstancesKeyword_54() { return cInstancesKeyword_54; }

		//'debug'
		public Keyword getDebugKeyword_55() { return cDebugKeyword_55; }

		//'analysis'
		public Keyword getAnalysisKeyword_56() { return cAnalysisKeyword_56; }

		//'receive_error'
		public Keyword getReceive_errorKeyword_57() { return cReceive_errorKeyword_57; }

		//'contain_error'
		public Keyword getContain_errorKeyword_58() { return cContain_errorKeyword_58; }

		//'propagate_error'
		public Keyword getPropagate_errorKeyword_59() { return cPropagate_errorKeyword_59; }

		//'error_state_reachable'
		public Keyword getError_state_reachableKeyword_60() { return cError_state_reachableKeyword_60; }

		//'flow_source'
		public Keyword getFlow_sourceKeyword_61() { return cFlow_sourceKeyword_61; }

		//'flow_destination'
		public Keyword getFlow_destinationKeyword_62() { return cFlow_destinationKeyword_62; }

		//'flow_elements'
		public Keyword getFlow_elementsKeyword_63() { return cFlow_elementsKeyword_63; }

		//'flow_specifications'
		public Keyword getFlow_specificationsKeyword_64() { return cFlow_specificationsKeyword_64; }

		//'end_to_end_flows'
		public Keyword getEnd_to_end_flowsKeyword_65() { return cEnd_to_end_flowsKeyword_65; }
	}

	public class RealTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.RealTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedRealParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//@Override
		//RealTerm aadl2::RealLiteral:
		//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=UnsignedReal unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedReal
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedReal
		public RuleCall getValueUnsignedRealParserRuleCall_0_0() { return cValueUnsignedRealParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.UnsignedReal");
		private final RuleCall cREAL_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedReal aadl2::Real:
		//	REAL_LIT;
		@Override public ParserRule getRule() { return rule; }

		//REAL_LIT
		public RuleCall getREAL_LITTerminalRuleCall() { return cREAL_LITTerminalRuleCall; }
	}

	public class IntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.IntegerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//@Override
		//IntegerTerm aadl2::IntegerLiteral:
		//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=UnsignedInt unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedInt
		public RuleCall getValueUnsignedIntParserRuleCall_0_0() { return cValueUnsignedIntParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.UnsignedInt");
		private final RuleCall cINTEGER_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedInt aadl2::Integer:
		//	INTEGER_LIT;
		@Override public ParserRule getRule() { return rule; }

		//INTEGER_LIT
		public RuleCall getINTEGER_LITTerminalRuleCall() { return cINTEGER_LITTerminalRuleCall; }
	}

	public class ResoluteSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.ResoluteSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResoluteSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProvesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProvesAnalysisStatementParserRuleCall_1_0 = (RuleCall)cProvesAssignment_1.eContents().get(0);
		
		//ResoluteSubclause:
		//	{ResoluteSubclause} proves+=AnalysisStatement*
		//	//	proves+=ProveStatement*
		//;
		@Override public ParserRule getRule() { return rule; }

		//{ResoluteSubclause} proves+=AnalysisStatement*
		public Group getGroup() { return cGroup; }

		//{ResoluteSubclause}
		public Action getResoluteSubclauseAction_0() { return cResoluteSubclauseAction_0; }

		//proves+=AnalysisStatement*
		public Assignment getProvesAssignment_1() { return cProvesAssignment_1; }

		//AnalysisStatement
		public RuleCall getProvesAnalysisStatementParserRuleCall_1_0() { return cProvesAnalysisStatementParserRuleCall_1_0; }
	}

	public class NestedDotIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.NestedDotID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBaseNamedElementCrossReference_0_0 = (CrossReference)cBaseAssignment_0.eContents().get(0);
		private final RuleCall cBaseNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cBaseNamedElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubNestedDotIDParserRuleCall_1_1_0 = (RuleCall)cSubAssignment_1_1.eContents().get(0);
		
		//NestedDotID:
		//	base=[aadl2::NamedElement] ('.' sub=NestedDotID)?;
		@Override public ParserRule getRule() { return rule; }

		//base=[aadl2::NamedElement] ('.' sub=NestedDotID)?
		public Group getGroup() { return cGroup; }

		//base=[aadl2::NamedElement]
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//[aadl2::NamedElement]
		public CrossReference getBaseNamedElementCrossReference_0_0() { return cBaseNamedElementCrossReference_0_0; }

		//ID
		public RuleCall getBaseNamedElementIDTerminalRuleCall_0_0_1() { return cBaseNamedElementIDTerminalRuleCall_0_0_1; }

		//('.' sub=NestedDotID)?
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//sub=NestedDotID
		public Assignment getSubAssignment_1_1() { return cSubAssignment_1_1; }

		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_1_1_0() { return cSubNestedDotIDParserRuleCall_1_1_0; }
	}

	public class LintStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.LintStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cWarningStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cWarningKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cErrorStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cErrorKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInfoStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cInfoKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		
		//LintStatement:
		//	{WarningStatement} 'warning' expr=Expr
		//	| {ErrorStatement} 'error' expr=Expr
		//	| {InfoStatement} 'info' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//{WarningStatement} 'warning' expr=Expr | {ErrorStatement} 'error' expr=Expr | {InfoStatement} 'info' expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{WarningStatement} 'warning' expr=Expr
		public Group getGroup_0() { return cGroup_0; }

		//{WarningStatement}
		public Action getWarningStatementAction_0_0() { return cWarningStatementAction_0_0; }

		//'warning'
		public Keyword getWarningKeyword_0_1() { return cWarningKeyword_0_1; }

		//expr=Expr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_2_0() { return cExprExprParserRuleCall_0_2_0; }

		//{ErrorStatement} 'error' expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{ErrorStatement}
		public Action getErrorStatementAction_1_0() { return cErrorStatementAction_1_0; }

		//'error'
		public Keyword getErrorKeyword_1_1() { return cErrorKeyword_1_1; }

		//expr=Expr
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_2_0() { return cExprExprParserRuleCall_1_2_0; }

		//{InfoStatement} 'info' expr=Expr
		public Group getGroup_2() { return cGroup_2; }

		//{InfoStatement}
		public Action getInfoStatementAction_2_0() { return cInfoStatementAction_2_0; }

		//'info'
		public Keyword getInfoKeyword_2_1() { return cInfoKeyword_2_1; }

		//expr=Expr
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_2_0() { return cExprExprParserRuleCall_2_2_0; }
	}

	public class RulesetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.Ruleset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyRulesetBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////RuleDefinition:
		////	'rule' name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' body=DefinitionBody
		////;
		//Ruleset:
		//	'ruleset' name=ID '{' body=RulesetBody '}';
		@Override public ParserRule getRule() { return rule; }

		//'ruleset' name=ID '{' body=RulesetBody '}'
		public Group getGroup() { return cGroup; }

		//'ruleset'
		public Keyword getRulesetKeyword_0() { return cRulesetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body=RulesetBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//RulesetBody
		public RuleCall getBodyRulesetBodyParserRuleCall_3_0() { return cBodyRulesetBodyParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RulesetBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.RulesetBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRulesetBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLintStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLintStatementsLintStatementParserRuleCall_1_0 = (RuleCall)cLintStatementsAssignment_1.eContents().get(0);
		
		//RulesetBody:
		//	{RulesetBody} lintStatements+=LintStatement*;
		@Override public ParserRule getRule() { return rule; }

		//{RulesetBody} lintStatements+=LintStatement*
		public Group getGroup() { return cGroup; }

		//{RulesetBody}
		public Action getRulesetBodyAction_0() { return cRulesetBodyAction_0; }

		//lintStatements+=LintStatement*
		public Assignment getLintStatementsAssignment_1() { return cLintStatementsAssignment_1; }

		//LintStatement
		public RuleCall getLintStatementsLintStatementParserRuleCall_1_0() { return cLintStatementsLintStatementParserRuleCall_1_0; }
	}

	public class AnalysisStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.atc.resolute.Resolute.AnalysisStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProveStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cProveKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCheckStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCheckKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		
		////ProveStatement:
		////	'prove' expr=Expr
		////;
		//AnalysisStatement:
		//	{ProveStatement} 'prove' expr=Expr
		//	| {CheckStatement} 'check' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//{ProveStatement} 'prove' expr=Expr | {CheckStatement} 'check' expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ProveStatement} 'prove' expr=Expr
		public Group getGroup_0() { return cGroup_0; }

		//{ProveStatement}
		public Action getProveStatementAction_0_0() { return cProveStatementAction_0_0; }

		//'prove'
		public Keyword getProveKeyword_0_1() { return cProveKeyword_0_1; }

		//expr=Expr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_2_0() { return cExprExprParserRuleCall_0_2_0; }

		//{CheckStatement} 'check' expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{CheckStatement}
		public Action getCheckStatementAction_1_0() { return cCheckStatementAction_1_0; }

		//'check'
		public Keyword getCheckKeyword_1_1() { return cCheckKeyword_1_1; }

		//expr=Expr
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_2_0() { return cExprExprParserRuleCall_1_2_0; }
	}
	
	
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final NamespaceElements pNamespace;
	private final NamedElementElements pNamedElement;
	private final ElementElements pElement;
	private final ResoluteLibraryElements pResoluteLibrary;
	private final DefinitionElements pDefinition;
	private final TypeElements pType;
	private final BaseTypeElements pBaseType;
	private final ArgElements pArg;
	private final ConstantDefinitionElements pConstantDefinition;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final DefinitionBodyElements pDefinitionBody;
	private final ClaimContextElements pClaimContext;
	private final ClaimAssumptionElements pClaimAssumption;
	private final ClaimStrategyElements pClaimStrategy;
	private final ClaimTextElements pClaimText;
	private final ClaimTextVarElements pClaimTextVar;
	private final ExprElements pExpr;
	private final ImpliesExprElements pImpliesExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final InstanceOfExprElements pInstanceOfExpr;
	private final RelationalOpElements pRelationalOp;
	private final RelationalExprElements pRelationalExpr;
	private final PlusExprElements pPlusExpr;
	private final TimesExprElements pTimesExpr;
	private final ExpExprElements pExpExpr;
	private final PrefixExprElements pPrefixExpr;
	private final AtomicExprElements pAtomicExpr;
	private final LetBindingElements pLetBinding;
	private final BuiltInFnElements pBuiltInFn;
	private final RealTermElements pRealTerm;
	private final UnsignedRealElements pUnsignedReal;
	private final IntegerTermElements pIntegerTerm;
	private final UnsignedIntElements pUnsignedInt;
	private final ResoluteSubclauseElements pResoluteSubclause;
	private final NestedDotIDElements pNestedDotID;
	private final LintStatementElements pLintStatement;
	private final RulesetElements pRuleset;
	private final RulesetBodyElements pRulesetBody;
	private final AnalysisStatementElements pAnalysisStatement;
	
	private final Grammar grammar;

	private final PropertiesGrammarAccess gaProperties;

	@Inject
	public ResoluteGrammarAccess(GrammarProvider grammarProvider,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaProperties = gaProperties;
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pNamespace = new NamespaceElements();
		this.pNamedElement = new NamedElementElements();
		this.pElement = new ElementElements();
		this.pResoluteLibrary = new ResoluteLibraryElements();
		this.pDefinition = new DefinitionElements();
		this.pType = new TypeElements();
		this.pBaseType = new BaseTypeElements();
		this.pArg = new ArgElements();
		this.pConstantDefinition = new ConstantDefinitionElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pDefinitionBody = new DefinitionBodyElements();
		this.pClaimContext = new ClaimContextElements();
		this.pClaimAssumption = new ClaimAssumptionElements();
		this.pClaimStrategy = new ClaimStrategyElements();
		this.pClaimText = new ClaimTextElements();
		this.pClaimTextVar = new ClaimTextVarElements();
		this.pExpr = new ExprElements();
		this.pImpliesExpr = new ImpliesExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pInstanceOfExpr = new InstanceOfExprElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pPlusExpr = new PlusExprElements();
		this.pTimesExpr = new TimesExprElements();
		this.pExpExpr = new ExpExprElements();
		this.pPrefixExpr = new PrefixExprElements();
		this.pAtomicExpr = new AtomicExprElements();
		this.pLetBinding = new LetBindingElements();
		this.pBuiltInFn = new BuiltInFnElements();
		this.pRealTerm = new RealTermElements();
		this.pUnsignedReal = new UnsignedRealElements();
		this.pIntegerTerm = new IntegerTermElements();
		this.pUnsignedInt = new UnsignedIntElements();
		this.pResoluteSubclause = new ResoluteSubclauseElements();
		this.pNestedDotID = new NestedDotIDElements();
		this.pLintStatement = new LintStatementElements();
		this.pRuleset = new RulesetElements();
		this.pRulesetBody = new RulesetBodyElements();
		this.pAnalysisStatement = new AnalysisStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.rockwellcollins.atc.resolute.Resolute".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	//AnnexLibrary aadl2::AnnexLibrary:
	//	ResoluteLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause aadl2::AnnexSubclause:
	//	ResoluteSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//Namespace aadl2::Namespace:
	//	FunctionDefinition;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	//NamedElement aadl2::NamedElement:
	//	Definition
	//	| Arg
	//	| LetBinding;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}

	//Element aadl2::Element:
	//	Expr
	//	//|	ProveStatement
	//	| AnalysisStatement
	//	| ClaimText
	//	| DefinitionBody;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//ResoluteLibrary:
	//	{ResoluteLibrary} definitions+=Definition*;
	public ResoluteLibraryElements getResoluteLibraryAccess() {
		return pResoluteLibrary;
	}
	
	public ParserRule getResoluteLibraryRule() {
		return getResoluteLibraryAccess().getRule();
	}

	//Definition:
	//	ConstantDefinition
	//	| FunctionDefinition
	//	| Ruleset;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Type:
	//	{ListType} '[' type=Type ']'
	//	| {SetType} '{' type=Type '}'
	//	| BaseType ('<' paramType=Type '>')?
	//	| {LibraryFnType} libName=ID '.' fnType=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//BaseType:
	//	type=('int'
	//	| 'real'
	//	| 'string'
	//	| 'bool'
	//	| 'range'
	//	| 'aadl'
	//	| 'component'
	//	| 'abstract'
	//	| 'bus'
	//	| 'data'
	//	| 'device'
	//	| 'memory'
	//	| 'processor'
	//	| 'process'
	//	| 'subprogram_group'
	//	| 'subprogram'
	//	| 'system'
	//	| 'thread_group'
	//	| 'thread'
	//	| 'virtual_bus'
	//	| 'virtual_processor'
	//	| 'connection'
	//	| 'property'
	//	| 'feature'
	//	| 'port'
	//	| 'data_port'
	//	| 'event_port'
	//	| 'event_data_port'
	//	| 'feature_group'
	//	| 'access'
	//	| 'bus_access'
	//	| 'provides_bus_access'
	//	| 'requires_bus_access'
	//	| 'data_access'
	//	| 'provides_data_access'
	//	| 'requires_data_access'
	//	| 'subprogram_access'
	//	| 'provides_subprogram_access'
	//	| 'requires_subprogram_access'
	//	| 'subprogram_group_access'
	//	| 'provides_subprogram_group_access'
	//	| 'requires_subprogram_group_access'
	//	| 'flow_specification'
	//	| 'end_to_end_flow');
	public BaseTypeElements getBaseTypeAccess() {
		return pBaseType;
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}

	////Arg types are used for functions, claims, and quantifiers
	//Arg:
	//	=> (name=ID ':' type=Type) | {QuantArg} name=ID ':' expr=Expr;
	public ArgElements getArgAccess() {
		return pArg;
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//ConstantDefinition:
	//	name=ID ':' type=Type '=' expr=Expr;
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return pConstantDefinition;
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//FunctionDefinition:
	//	name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' body=DefinitionBody;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//DefinitionBody:
	//	{FunctionBody} ':' type=Type '=' expr=Expr
	//	| {ClaimBody} '<=' ('**' claim+=ClaimText+ '**') context+=ClaimContext* assumptions+=ClaimAssumption*
	//	strategies+=ClaimStrategy* expr=Expr;
	public DefinitionBodyElements getDefinitionBodyAccess() {
		return pDefinitionBody;
	}
	
	public ParserRule getDefinitionBodyRule() {
		return getDefinitionBodyAccess().getRule();
	}

	//ClaimContext:
	//	'context' name=ID ':' val=StringTerm;
	public ClaimContextElements getClaimContextAccess() {
		return pClaimContext;
	}
	
	public ParserRule getClaimContextRule() {
		return getClaimContextAccess().getRule();
	}

	//ClaimAssumption:
	//	'assumption' name=ID ':' val=StringTerm;
	public ClaimAssumptionElements getClaimAssumptionAccess() {
		return pClaimAssumption;
	}
	
	public ParserRule getClaimAssumptionRule() {
		return getClaimAssumptionAccess().getRule();
	}

	//ClaimStrategy:
	//	'strategy' name=ID ':' val=StringTerm;
	public ClaimStrategyElements getClaimStrategyAccess() {
		return pClaimStrategy;
	}
	
	public ParserRule getClaimStrategyRule() {
		return getClaimStrategyAccess().getRule();
	}

	//ClaimText:
	//	{ClaimString} str=STRING
	//	| {ClaimArg} arg=[ClaimTextVar] ('%' unit=[aadl2::UnitLiteral])?;
	public ClaimTextElements getClaimTextAccess() {
		return pClaimText;
	}
	
	public ParserRule getClaimTextRule() {
		return getClaimTextAccess().getRule();
	}

	//ClaimTextVar:
	//	Arg | ConstantDefinition | LetBinding;
	public ClaimTextVarElements getClaimTextVarAccess() {
		return pClaimTextVar;
	}
	
	public ParserRule getClaimTextVarRule() {
		return getClaimTextVarAccess().getRule();
	}

	//Expr:
	//	ImpliesExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ImpliesExpr Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return pImpliesExpr;
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr Expr:
	//	InstanceOfExpr (=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=InstanceOfExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//InstanceOfExpr Expr:
	//	RelationalExpr (=> ({InstanceOfExpr.expr=current} 'instanceof') type=BaseType)?;
	public InstanceOfExprElements getInstanceOfExprAccess() {
		return pInstanceOfExpr;
	}
	
	public ParserRule getInstanceOfExprRule() {
		return getInstanceOfExprAccess().getRule();
	}

	//RelationalOp:
	//	'<' | '<=' | '>' | '>=' | '=' | '<>';
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//RelationalExpr Expr:
	//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	//PlusExpr Expr:
	//	TimesExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*;
	public PlusExprElements getPlusExprAccess() {
		return pPlusExpr;
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//TimesExpr Expr:
	//	ExpExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*;
	public TimesExprElements getTimesExprAccess() {
		return pTimesExpr;
	}
	
	public ParserRule getTimesExprRule() {
		return getTimesExprAccess().getRule();
	}

	//ExpExpr Expr:
	//	PrefixExpr (=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*;
	public ExpExprElements getExpExprAccess() {
		return pExpExpr;
	}
	
	public ParserRule getExpExprRule() {
		return getExpExprAccess().getRule();
	}

	//PrefixExpr Expr:
	//	{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
	//	| {CastExpr} '(' type=BaseType ')' expr=PrefixExpr
	//	| AtomicExpr;
	public PrefixExprElements getPrefixExprAccess() {
		return pPrefixExpr;
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}

	//AtomicExpr Expr:
	//	{IdExpr} id=[aadl2::NamedElement|QCREF] | {ThisExpr} 'this' ('.' sub=NestedDotID)?
	//	| {FailExpr} 'fail' (val=Expr | '**' failmsg+=ClaimText+ '**') | {IntExpr} val=IntegerTerm
	//	| {RealExpr} val=RealTerm
	//	| {BoolExpr} val=BooleanLiteral
	//	| {StringExpr} val=StringTerm
	//	| {IfThenElseExpr} 'if' cond=Expr 'then' then=Expr 'else' else=Expr
	//	| {QuantifiedExpr} quant=('forall' | 'exists') ('(' args+=Arg ')')+ '.' expr=Expr
	//	| => ({LibraryFnCallExpr} libName=ID '.' fnName=ID '(' (args+=Expr (',' args+=Expr)*)? ')') | {BuiltInFnCallExpr}
	//	fn=BuiltInFn '(' (args+=Expr (',' args+=Expr)*)? ')'
	//	| {FnCallExpr} fn=[FunctionDefinition] '(' (args+=Expr (',' args+=Expr)*)? ')'
	//	| {LintExpr} lintStmt=LintStatement
	//	| '[' Expr ({ListFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {ListExpr.exprs+=current}
	//	(',' exprs+=Expr)*) ']'
	//	| '{' Expr ({SetFilterMapExpr.map=current} 'for' ('(' args+=Arg ')')+ ('|' filter=Expr)? | {SetExpr.exprs+=current}
	//	(',' exprs+=Expr)*) '}'
	//	| {ListExpr} '[' ']'
	//	| {SetExpr} '{' '}'
	//	| {LetExpr} 'let' binding=LetBinding ';' expr=Expr
	//	| '(' Expr ')';
	public AtomicExprElements getAtomicExprAccess() {
		return pAtomicExpr;
	}
	
	public ParserRule getAtomicExprRule() {
		return getAtomicExprAccess().getRule();
	}

	//LetBinding:
	//	name=ID ':' type=Type '=' expr=Expr;
	public LetBindingElements getLetBindingAccess() {
		return pLetBinding;
	}
	
	public ParserRule getLetBindingRule() {
		return getLetBindingAccess().getRule();
	}

	//BuiltInFn: // Primary type: aadl
	//	'has_property' | 'property' | 'property_member' | 'has_parent' | 'parent' | 'name' | 'type' | 'has_type' |
	//	'is_in_array' | 'has_prototypes' | 'has_modes' | 'is_processor' | 'is_virtual_processor' | 'is_system' | 'is_bus' |
	//	'is_virtual_bus' | 'is_device' | 'is_memory' | 'is_thread' | 'is_thread_group' | 'is_process' | 'is_data' |
	//	'is_subprogram' | 'is_of_type' | 'is_bound_to' | 'has_member' | 'features' | 'connections' // Primary type: property
	//	| 'enumerated_values' // Primary type: component
	//	| 'subcomponents' // Primary type: connection
	//	| 'source' | 'destination' | 'is_bidirectional' // Primary type: feature
	//	| 'direction' | 'is_event_port' | 'is_abstract_feature' | 'is_data_port' | 'is_port' | 'is_data_access' |
	//	'is_bus_access' // Primary type: range
	//	| 'lower_bound' | 'upper_bound' // Primary type: set or list
	//	| 'member' | 'length' | 'size' // Primary type: list
	//	| 'sum' | 'append' | 'head' | 'tail' | 'as_set' // Primary type: set
	//	| 'union' | 'intersect' | 'as_list' // Other
	//	| 'instance' | 'instances' | 'debug' | 'analysis' // Error Annex
	//	| 'receive_error' // the component can receive an incoming error
	//	| 'contain_error' // the component contain the error
	//	| 'propagate_error' // the component propagate an error
	//	| 'error_state_reachable' // the error state is reachable
	//	| 'flow_source' | 'flow_destination' | 'flow_elements' | 'flow_specifications' | 'end_to_end_flows';
	public BuiltInFnElements getBuiltInFnAccess() {
		return pBuiltInFn;
	}
	
	public ParserRule getBuiltInFnRule() {
		return getBuiltInFnAccess().getRule();
	}

	//@Override
	//RealTerm aadl2::RealLiteral:
	//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
	public RealTermElements getRealTermAccess() {
		return pRealTerm;
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//UnsignedReal aadl2::Real:
	//	REAL_LIT;
	public UnsignedRealElements getUnsignedRealAccess() {
		return pUnsignedReal;
	}
	
	public ParserRule getUnsignedRealRule() {
		return getUnsignedRealAccess().getRule();
	}

	//@Override
	//IntegerTerm aadl2::IntegerLiteral:
	//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
	public IntegerTermElements getIntegerTermAccess() {
		return pIntegerTerm;
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//UnsignedInt aadl2::Integer:
	//	INTEGER_LIT;
	public UnsignedIntElements getUnsignedIntAccess() {
		return pUnsignedInt;
	}
	
	public ParserRule getUnsignedIntRule() {
		return getUnsignedIntAccess().getRule();
	}

	//ResoluteSubclause:
	//	{ResoluteSubclause} proves+=AnalysisStatement*
	//	//	proves+=ProveStatement*
	//;
	public ResoluteSubclauseElements getResoluteSubclauseAccess() {
		return pResoluteSubclause;
	}
	
	public ParserRule getResoluteSubclauseRule() {
		return getResoluteSubclauseAccess().getRule();
	}

	//NestedDotID:
	//	base=[aadl2::NamedElement] ('.' sub=NestedDotID)?;
	public NestedDotIDElements getNestedDotIDAccess() {
		return pNestedDotID;
	}
	
	public ParserRule getNestedDotIDRule() {
		return getNestedDotIDAccess().getRule();
	}

	//LintStatement:
	//	{WarningStatement} 'warning' expr=Expr
	//	| {ErrorStatement} 'error' expr=Expr
	//	| {InfoStatement} 'info' expr=Expr;
	public LintStatementElements getLintStatementAccess() {
		return pLintStatement;
	}
	
	public ParserRule getLintStatementRule() {
		return getLintStatementAccess().getRule();
	}

	////RuleDefinition:
	////	'rule' name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' body=DefinitionBody
	////;
	//Ruleset:
	//	'ruleset' name=ID '{' body=RulesetBody '}';
	public RulesetElements getRulesetAccess() {
		return pRuleset;
	}
	
	public ParserRule getRulesetRule() {
		return getRulesetAccess().getRule();
	}

	//RulesetBody:
	//	{RulesetBody} lintStatements+=LintStatement*;
	public RulesetBodyElements getRulesetBodyAccess() {
		return pRulesetBody;
	}
	
	public ParserRule getRulesetBodyRule() {
		return getRulesetBodyAccess().getRule();
	}

	////ProveStatement:
	////	'prove' expr=Expr
	////;
	//AnalysisStatement:
	//	{ProveStatement} 'prove' expr=Expr
	//	| {CheckStatement} 'check' expr=Expr;
	public AnalysisStatementElements getAnalysisStatementAccess() {
		return pAnalysisStatement;
	}
	
	public ParserRule getAnalysisStatementRule() {
		return getAnalysisStatementAccess().getRule();
	}

	//PModel aadl2::Element:
	//	ContainedPropertyAssociation //| BasicPropertyAssociation | PropertyAssociation
	//;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (AppliesToKeywords appliesTo+=ContainmentPath (','
	//	appliesTo+=ContainmentPath)*)? (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF]
	//	'=>' ownedValue+=PropertyValue ';';
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	//ContainmentPath aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement
	//	//	( 'annex' containmentPathElement+=AnnexPath )?
	//;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression
	//	InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')';
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression (InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')')?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression aadl2::PropertyExpression:
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm
	//	| ComputedTerm | StringTerm | NumericRangeTerm
	//	| super::RealTerm | super::IntegerTerm
	//	| ListTerm
	//	| BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?='true' | 'false');
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm aadl2::ReferenceValue:
	//	'reference' '('
	//	path=ContainmentPathElement
	//	//	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	')';
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm aadl2::RecordValue:
	//	'['
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	']';
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm aadl2::RecordValue:
	//	'('
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	')';
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm aadl2::ComputedValue:
	//	'compute' '('
	//	function=ID
	//	')';
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm aadl2::ClassifierValue:
	//	'classifier' '('
	//	classifier=[aadl2::ComponentClassifier|QCREF]
	//	')';
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm aadl2::ListValue:
	//	{aadl2::ListValue}
	//	'(' (ownedListElement+=PropertyExpression (',' ownedListElement+=PropertyExpression)*)?
	//	')';
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty]
	//	'=>'
	//	ownedValue=PropertyExpression
	//	';';
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	//ContainmentPathElement aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange*) ('.' path=ContainmentPathElement)?
	//	//	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	'{' STAR STAR ID STAR STAR '}';
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus aadl2::OperationKind:
	//	'+' | '-';
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString:
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange aadl2::ArrayRange:
	//	{aadl2::ArrayRange}
	//	'[' lowerBound=INTVALUE ('..' upperBound=INTVALUE)?
	//	']';
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//SignedInt aadl2::Integer:
	//	('+' | '-')? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedReal aadl2::Real:
	//	('+' | '-')? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm aadl2::RangeValue:
	//	minimum=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	'..' maximum=NumAlt ('delta' delta=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt aadl2::PropertyExpression:
	//	super::RealTerm | super::IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//AppliesToKeywords:
	//	'applies' 'to';
	public PropertiesGrammarAccess.AppliesToKeywordsElements getAppliesToKeywordsAccess() {
		return gaProperties.getAppliesToKeywordsAccess();
	}
	
	public ParserRule getAppliesToKeywordsRule() {
		return getAppliesToKeywordsAccess().getRule();
	}

	//InBindingKeywords:
	//	'in' 'binding';
	public PropertiesGrammarAccess.InBindingKeywordsElements getInBindingKeywordsAccess() {
		return gaProperties.getInBindingKeywordsAccess();
	}
	
	public ParserRule getInBindingKeywordsRule() {
		return getInBindingKeywordsAccess().getRule();
	}

	//InModesKeywords:
	//	'in' 'modes';
	public PropertiesGrammarAccess.InModesKeywordsElements getInModesKeywordsAccess() {
		return gaProperties.getInModesKeywordsAccess();
	}
	
	public ParserRule getInModesKeywordsRule() {
		return getInModesKeywordsAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	('e' | 'E') '+'? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('.' DIGIT+ ('_' DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('#' BASED_INTEGER '#' INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ('_'? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID '::' ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ('::' ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID '::')* ID ('.' ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	'*';
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	//terminal ID:
	//	('a'..'z'
	//	| 'A'..'Z') ('_'? ('a'..'z'
	//	| 'A'..'Z'
	//	| '0'..'9'))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
